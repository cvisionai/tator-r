% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generated_tator_api.R
\docType{class}
\name{TatorApi}
\alias{TatorApi}
\title{Tator operations}
\format{
An \code{R6Class} generator object
}
\description{
tator.Tator
}
\section{Methods}{

\describe{
\strong{ AlgorithmLaunch } \emph{  }
Launch a registered algorithm.  This will create one or more Argo workflows that execute the named algorithm registration. To get a list of available algorithms, use the `Algorithms` endpoint. A media list will be submitted for processing using either a query string or  a list of media IDs. If neither are included, the algorithm will be launched on all media in the project.   Media is divided into batches for based on the `files_per_job` field of the  `Algorithm` object. One batch is submitted to each Argo workflow.  Submitted algorithm jobs may be cancelled via the `Job` or `JobGroup` endpoints.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } algorithm.launch.spec \link{AlgorithmLaunchSpec}
\item \emph{ @returnType } \link{AlgorithmLaunch} \cr

\item status code : 201 | Successful launch of algorithm.

\item return type : AlgorithmLaunch
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ CreateAnalysis } \emph{  }
Create analysis.  Analysis objects are used to display information about filtered media lists and/or annotations on the project detail page of the web UI. Currently only counting analysis is supported.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } analysis.spec \link{AnalysisSpec}
\item \emph{ @returnType } \link{CreateResponse} \cr

\item status code : 201 | Successful creation of analysis.

\item return type : CreateResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ CreateLeafList } \emph{  }
Create leaf list.  Leaves are used to define label hierarchies that can be used for autocompletion of string attribute types. Leaves are a type of entity in Tator, meaning they can be described by user-defined attributes.   This method does a bulk create on a list of `LeafSpec` objects. A  maximum of 500 leaves may be created in one request.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } leaf.spec list( \link{LeafSpec} )
\item \emph{ @returnType } \link{CreateListResponse} \cr

\item status code : 201 | Successful creation of leaf.

\item return type : CreateListResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ CreateLeafType } \emph{  }
Create leaf type.  A leaf type is the metadata definition object for a leaf. It includes name, description, and may have any number of user-defined attribute types associated with it.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } leaf.type.spec \link{LeafTypeSpec}
\item \emph{ @returnType } \link{CreateResponse} \cr

\item status code : 201 | Successful creation of leaf type.

\item return type : CreateResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ CreateLocalizationList } \emph{  }
Create localiazation list.  Localizations are shape annotations drawn on a video or image. Available shapes (`dtype`) are  box, line, or dot. Each shape is parameterized by a different subset of data members: - `box` uses `x`, `y`, `width`, `height`. - `line` uses `x`, `y`, `u`, `v`. - `dot` uses `x` and `y`.  Geometry members may be left null when creating a localization, in which case the shapes may be  drawn later using the redraw capability in the web UI. Localizations are a type of entity in Tator, meaning they can be described by user defined attributes.   This method does a bulk create on a list of `LocalizationSpec` objects. A  maximum of 500 localizations may be created in one request.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } localization.spec list( \link{LocalizationSpec} )
\item \emph{ @returnType } \link{CreateListResponse} \cr

\item status code : 201 | Successful creation of localization(s).

\item return type : CreateListResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ CreateLocalizationType } \emph{  }
Create localization type.  A localization type is the metadata definition object for a localization. It includes shape, name, description, and may have any number of user-defined attribute types associated with it.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } localization.type.spec \link{LocalizationTypeSpec}
\item \emph{ @returnType } \link{CreateResponse} \cr

\item status code : 201 | Successful creation of localization type.

\item return type : CreateResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ CreateMedia } \emph{  }
Create media.  A media may be an image or a video. Media are a type of entity in Tator, meaning they can be described by user defined attributes.   This method creates a `Media` object in the database. For images, the  media must already be uploaded and an upload URL must be provided, as well as the group and job IDs associated with the upload. For videos, it is recommended to use the `Transcode` endpoint, which will create the media object itself. This method is only needed for local  transcodes. In that case, it will create an empty Media object; thumbnails, streaming, and archival videos must be subsequently uploaded via tus. Videos must be  moved to the media folder using the `MoveVideo` endpoint,  which also calls the `Media` PATCH method to update the `media_files` field. Thumbnails may be saved by just using the `Media` PATCH method directly.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } media.spec \link{MediaSpec}
\item \emph{ @returnType } \link{CreateResponse} \cr

\item status code : 201 | Successful creation of media.

\item return type : CreateResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ CreateMediaType } \emph{  }
Create media type.  A media type is the metadata definition object for media. It includes file format, name, description, and may have any number of user defined attribute types associated with it.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } media.type.spec \link{MediaTypeSpec}
\item \emph{ @returnType } \link{CreateResponse} \cr

\item status code : 201 | Successful creation of media type.

\item return type : CreateResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ CreateMembership } \emph{  }
Create membership.  Memberships specify a permission level of a user to a project. There are currently five cumulative permission levels: - `View Only` can only view a project and not change any data. - `Can Edit` can create, modify, and delete annotations. - `Can Transfer` can upload and download media. - `Can Execute` can launch algorithm workflows. - `Full Control` can change project settings, including inviting new members, project name, and    project metadata schema.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } membership.spec \link{MembershipSpec}
\item \emph{ @returnType } \link{CreateResponse} \cr

\item status code : 201 | Successful creation of membership.

\item return type : CreateResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ CreateObtainAuthToken } \emph{  }

\itemize{
\item \emph{ @param } credentials \link{Credentials}
\item \emph{ @returnType } \link{Token} \cr

\item status code : 200 | Login credentials accepted.

\item return type : Token
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Login credentials invalid.

\item response headers :

\tabular{ll}{
}
}

\strong{ CreateProgressSummaryAPI } \emph{  }
Create or update a progress summary.  This endpoint sets a key in redis that indicates how many jobs are in a job group as well as how many are completed. This is used to display summary progress in the progress bar. If not used for a given job group, the job completion is computed from the status of individual jobs in the group.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } progress.summary.spec \link{ProgressSummarySpec}
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 201 | Successful creation of progress summary message.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ CreateProject } \emph{  }
Create project.  Projects are the object under which all data in Tator is grouped, including user access, metadata definitions, media, and annotations. Data does not cross boundaries between projects.

\itemize{
\item \emph{ @param } project.spec \link{ProjectSpec}
\item \emph{ @returnType } \link{CreateResponse} \cr

\item status code : 201 | Successful creation of project.

\item return type : CreateResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ CreateStateList } \emph{  }
Create state list.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a type of entity in Tator, meaning they can be described by user defined attributes.   This method does a bulk create on a list of `StateSpec` objects. A  maximum of 500 states may be created in one request.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } state.spec list( \link{StateSpec} )
\item \emph{ @returnType } \link{CreateListResponse} \cr

\item status code : 201 | Successful creation of state(s).

\item return type : CreateListResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ CreateStateType } \emph{  }
Create state type.  A state type is the metadata definition object for a state. It includes association type, name, description, and may have any number of user-defined attribute types associated with it.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } state.type.spec \link{StateTypeSpec}
\item \emph{ @returnType } \link{CreateResponse} \cr

\item status code : 201 | Successful creation of state type.

\item return type : CreateResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ CreateTemporaryFile } \emph{  }
Create temporary file.  Temporary files are files stored server side for a defined duration.   The file must first be uploaded via tus, and can subsequently be saved using this endpoint.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } temporary.file.spec \link{TemporaryFileSpec}
\item \emph{ @returnType } \link{CreateResponse} \cr

\item status code : 201 | Successful creation of temporary file.

\item return type : CreateResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ CreateVersion } \emph{  }
Create version.  Versions allow for multiple \"layers\" of annotations on the same media. Versions are created at the project level, but are only displayed for a given media if that media contains annotations in that version. The version of an annotation can be set by providing it in a POST operation. Currently only localizations and states can have versions.  Versions are used in conjunction with the `modified` flag to determine whether an annotation should be displayed for a given media while annotating.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } version.spec \link{VersionSpec}
\item \emph{ @returnType } \link{CreateResponse} \cr

\item status code : 201 | Successful creation of version.

\item return type : CreateResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteAlgorithm } \emph{  }
Delete registered algorithm workflow

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful deletion of registered algorithm.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteJob } \emph{  }
Cancel a background job.  Algorithms and transcodes create argo workflows that are annotated with two uuid1 strings, one identifying the run and the other identifying the group. Jobs that are submitted together have the same group id, but each workflow has a unique run id.  This endpoint allows the user to cancel a job using the `run_uid` returned by either the `AlgorithmLaunch` or `Transcode` endpoints.

\itemize{
\item \emph{ @param } run.uid character
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful cancellation of job.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteJobGroup } \emph{  }
Cancel a group of background jobs.  Algorithms and transcodes create argo workflows that are annotated with two uuid1 strings, one identifying the run and the other identifying the group. Jobs that are submitted together have the same group id, but each workflow has a unique run id.  This endpoint allows the user to cancel a group of jobs using the `group_id`  returned by either the `AlgorithmLaunch` or `Transcode` endpoints.

\itemize{
\item \emph{ @param } group.id character
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful cancellation of job group.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteLeaf } \emph{  }
Delete leaf.  Leaves are used to define label hierarchies that can be used for autocompletion of string attribute types. Leaves are a type of entity in Tator, meaning they can be described by user-defined attributes.

\itemize{
\item \emph{ @param } id integer

\item status code : 200 | Successful deletion of leaf.

\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteLeafList } \emph{  }
Delete leaf list.  Leaves are used to define label hierarchies that can be used for autocompletion of string attribute types. Leaves are a type of entity in Tator, meaning they can be described by user-defined attributes.   This method performs a bulk delete on all leaves matching a query. It is  recommended to use a GET request first to check what is being deleted.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } ancestor character
\item \emph{ @param } type integer
\item \emph{ @param } name character
\item \emph{ @param } attribute character
\item \emph{ @param } attribute.lt character
\item \emph{ @param } attribute.lte character
\item \emph{ @param } attribute.gt character
\item \emph{ @param } attribute.gte character
\item \emph{ @param } attribute.contains character
\item \emph{ @param } attribute.distance character
\item \emph{ @param } attribute.null character
\item \emph{ @param } operation Enum < \link{count} >
\item \emph{ @param } start integer
\item \emph{ @param } stop integer
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful deletion of leaf list.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteLeafType } \emph{  }
Delete leaf type.  A leaf type is the metadata definition object for a leaf. It includes name, description, and may have any number of user-defined attribute types associated with it.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful deletion of leaf type.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteLocalization } \emph{  }
Delete localization.  Localizations are shape annotations drawn on a video or image. Available shapes (`dtype`) are  box, line, or dot. Each shape is parameterized by a different subset of data members: - `box` uses `x`, `y`, `width`, `height`. - `line` uses `x`, `y`, `u`, `v`. - `dot` uses `x` and `y`.  Geometry members may be left null when creating a localization, in which case the shapes may be  drawn later using the redraw capability in the web UI. Localizations are a type of entity in Tator, meaning they can be described by user defined attributes.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful deletion of localization.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteLocalizationList } \emph{  }
Delete localiazation list.  Localizations are shape annotations drawn on a video or image. Available shapes (`dtype`) are  box, line, or dot. Each shape is parameterized by a different subset of data members: - `box` uses `x`, `y`, `width`, `height`. - `line` uses `x`, `y`, `u`, `v`. - `dot` uses `x` and `y`.  Geometry members may be left null when creating a localization, in which case the shapes may be  drawn later using the redraw capability in the web UI. Localizations are a type of entity in Tator, meaning they can be described by user defined attributes.   This method performs a bulk delete on all localizations matching a query. It is  recommended to use a GET request first to check what is being deleted.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } media.query character
\item \emph{ @param } media.id list( integer )
\item \emph{ @param } type integer
\item \emph{ @param } version list( integer )
\item \emph{ @param } modified Enum < \link{0, 1} >
\item \emph{ @param } after integer
\item \emph{ @param } search character
\item \emph{ @param } attribute character
\item \emph{ @param } attribute.lt character
\item \emph{ @param } attribute.lte character
\item \emph{ @param } attribute.gt character
\item \emph{ @param } attribute.gte character
\item \emph{ @param } attribute.contains character
\item \emph{ @param } attribute.distance character
\item \emph{ @param } attribute.null character
\item \emph{ @param } operation Enum < \link{count} >
\item \emph{ @param } start integer
\item \emph{ @param } stop integer
\item \emph{ @param } exclude.parents integer
\item \emph{ @param } frame integer
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful deletion of localization list.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteLocalizationType } \emph{  }
Delete localization type.  A localization type is the metadata definition object for a localization. It includes shape, name, description, and may have any number of user-defined attribute types associated with it.   Note that this will also delete any localizations associated with the localization type.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful deletion of localization type.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteMedia } \emph{  }
Delete media.  A media may be an image or a video. Media are a type of entity in Tator, meaning they can be described by user defined attributes.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful deletion of media.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteMediaList } \emph{  }
Delete media list.  A media may be an image or a video. Media are a type of entity in Tator, meaning they can be described by user defined attributes.   This method performs a bulk delete on all media matching a query. It is  recommended to use a GET request first to check what is being deleted.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } media.id list( integer )
\item \emph{ @param } type integer
\item \emph{ @param } name character
\item \emph{ @param } md5 character
\item \emph{ @param } after character
\item \emph{ @param } search character
\item \emph{ @param } attribute character
\item \emph{ @param } attribute.lt character
\item \emph{ @param } attribute.lte character
\item \emph{ @param } attribute.gt character
\item \emph{ @param } attribute.gte character
\item \emph{ @param } attribute.contains character
\item \emph{ @param } attribute.distance character
\item \emph{ @param } attribute.null character
\item \emph{ @param } operation Enum < \link{count} >
\item \emph{ @param } start integer
\item \emph{ @param } stop integer
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful deletion of media list.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteMediaType } \emph{  }
Delete media type.  A media type is the metadata definition object for media. It includes file format, name, description, and may have any number of user defined attribute types associated with it.   Note that this will also delete any media associated with the media type.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful deletion of media type.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteMembership } \emph{  }
Delete membership.  Memberships specify a permission level of a user to a project. There are currently five cumulative permission levels: - `View Only` can only view a project and not change any data. - `Can Edit` can create, modify, and delete annotations. - `Can Transfer` can upload and download media. - `Can Execute` can launch algorithm workflows. - `Full Control` can change project settings, including inviting new members, project name, and    project metadata schema.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful deletion of membership.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteProject } \emph{  }
Delete project.  Projects are the object under which all data in Tator is grouped, including user access, metadata definitions, media, and annotations. Data does not cross boundaries between projects.   Only project owners may delete a project. Note that deleting a project will also delete all media and annotations within a project.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful deletion of project.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteState } \emph{  }
Delete state.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a type of entity in Tator, meaning they can be described by user defined attributes.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful deletion of state.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteStateList } \emph{  }
Delete state list.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a type of entity in Tator, meaning they can be described by user defined attributes.   This method performs a bulk delete on all states matching a query. It is  recommended to use a GET request first to check what is being deleted.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } media.query character
\item \emph{ @param } media.id list( integer )
\item \emph{ @param } type integer
\item \emph{ @param } version list( integer )
\item \emph{ @param } modified Enum < \link{0, 1} >
\item \emph{ @param } after integer
\item \emph{ @param } search character
\item \emph{ @param } attribute character
\item \emph{ @param } attribute.lt character
\item \emph{ @param } attribute.lte character
\item \emph{ @param } attribute.gt character
\item \emph{ @param } attribute.gte character
\item \emph{ @param } attribute.contains character
\item \emph{ @param } attribute.distance character
\item \emph{ @param } attribute.null character
\item \emph{ @param } operation Enum < \link{count} >
\item \emph{ @param } start integer
\item \emph{ @param } stop integer
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful deletion of state list.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteStateType } \emph{  }
Delete state type.  A state type is the metadata definition object for a state. It includes association type, name, description, and may have any number of user-defined attribute types associated with it.   Note that this will also delete any states associated with the state type.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful deletion of state type.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteTemporaryFile } \emph{  }
Delete temporary file.  Temporary files are files stored server side for a defined duration.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful deletion of temporary file.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteTemporaryFileList } \emph{  }
Delete temporary file list.  Temporary files are files stored server side for a defined duration.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } expired integer

\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteVersion } \emph{  }
Delete version.  Versions allow for multiple \"layers\" of annotations on the same media. Versions are created at the project level, but are only displayed for a given media if that media contains annotations in that version. The version of an annotation can be set by providing it in a POST operation. Currently only localizations and states can have versions.  Versions are used in conjunction with the `modified` flag to determine whether an annotation should be displayed for a given media while annotating.   Note that this will also delete any localizations or states associated with the deleted version.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful deletion of version.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetAlgorithmList } \emph{  }
Get registered algorithms.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @returnType } list( \link{Algorithm} ) \cr

\item status code : 200 | Successful retrieval of registered algorithms.

\item return type : array\link{Algorithm}
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetAnalysisList } \emph{  }
Get analysis.  Analysis objects are used to display information about filtered media lists and/or annotations on the project detail page of the web UI. Currently only counting analysis is supported.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @returnType } list( \link{Analysis} ) \cr

\item status code : 200 | Successful retrieval of analyses.

\item return type : array\link{Analysis}
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item response headers :

\tabular{ll}{
}
\item status code : 404 | Failure to find project with given ID.

\item response headers :

\tabular{ll}{
}
}

\strong{ GetClip } \emph{  }
Get video clip.  Facility to get a clip from the server. Returns a temporary file object that expires in 24 hours.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @param } frame.ranges list( character )
\item \emph{ @param } quality integer
\item \emph{ @returnType } \link{TemporaryFile} \cr

\item status code : 200 | Successful retrieval of video clip.

\item return type : TemporaryFile
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetFrame } \emph{  }
Get frame(s) from a video.  Facility to get a frame(jpg/png) of a given video frame, returns a square tile of frames based on the input parameter.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @param } frames list( integer )
\item \emph{ @param } tile character
\item \emph{ @param } roi character
\item \emph{ @param } animate integer
\item \emph{ @param } quality integer

\item status code : 200 | Successful retrieval of frame image.

\item return type : data.frame
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : data.frame
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : data.frame
\item response headers :

\tabular{ll}{
}
}

\strong{ GetLeaf } \emph{  }
Get leaf.  Leaves are used to define label hierarchies that can be used for autocompletion of string attribute types. Leaves are a type of entity in Tator, meaning they can be described by user-defined attributes.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{Leaf} \cr

\item status code : 200 | Successful retrieval of leaf.

\item return type : Leaf
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetLeafList } \emph{  }
Get leaf list.  Leaves are used to define label hierarchies that can be used for autocompletion of string attribute types. Leaves are a type of entity in Tator, meaning they can be described by user-defined attributes.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } ancestor character
\item \emph{ @param } type integer
\item \emph{ @param } name character
\item \emph{ @param } attribute character
\item \emph{ @param } attribute.lt character
\item \emph{ @param } attribute.lte character
\item \emph{ @param } attribute.gt character
\item \emph{ @param } attribute.gte character
\item \emph{ @param } attribute.contains character
\item \emph{ @param } attribute.distance character
\item \emph{ @param } attribute.null character
\item \emph{ @param } operation Enum < \link{count} >
\item \emph{ @param } start integer
\item \emph{ @param } stop integer
\item \emph{ @returnType } list( \link{Leaf} ) \cr

\item status code : 200 | Successful retrieval of leaf list.

\item return type : array\link{Leaf}
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetLeafType } \emph{  }
Get leaf type.  A leaf type is the metadata definition object for a leaf. It includes name, description, and may have any number of user-defined attribute types associated with it.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{LeafType} \cr

\item status code : 200 | Successful retrieval of leaf type.

\item return type : LeafType
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetLeafTypeList } \emph{  }
Get leaf type list.  A leaf type is the metadata definition object for a leaf. It includes name, description, and may have any number of user-defined attribute types associated with it.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @returnType } list( \link{LeafType} ) \cr

\item status code : 200 | Successful retrieval of leaf type list.

\item return type : array\link{LeafType}
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetLocalization } \emph{  }
Get localization.  Localizations are shape annotations drawn on a video or image. Available shapes (`dtype`) are  box, line, or dot. Each shape is parameterized by a different subset of data members: - `box` uses `x`, `y`, `width`, `height`. - `line` uses `x`, `y`, `u`, `v`. - `dot` uses `x` and `y`.  Geometry members may be left null when creating a localization, in which case the shapes may be  drawn later using the redraw capability in the web UI. Localizations are a type of entity in Tator, meaning they can be described by user defined attributes.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{Localization} \cr

\item status code : 200 | Successful retrieval of localization.

\item return type : Localization
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetLocalizationGraphic } \emph{  }
Get localization graphic from a media object.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @param } force.scale character
\item \emph{ @param } use.default.margins character
\item \emph{ @param } margin.x integer
\item \emph{ @param } margin.y integer

\item status code : 200 | Successful retrieval of localization graphic.

\item return type : data.frame
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : data.frame
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : data.frame
\item response headers :

\tabular{ll}{
}
}

\strong{ GetLocalizationList } \emph{  }
Get localization list.  Localizations are shape annotations drawn on a video or image. Available shapes (`dtype`) are  box, line, or dot. Each shape is parameterized by a different subset of data members: - `box` uses `x`, `y`, `width`, `height`. - `line` uses `x`, `y`, `u`, `v`. - `dot` uses `x` and `y`.  Geometry members may be left null when creating a localization, in which case the shapes may be  drawn later using the redraw capability in the web UI. Localizations are a type of entity in Tator, meaning they can be described by user defined attributes.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } media.query character
\item \emph{ @param } media.id list( integer )
\item \emph{ @param } type integer
\item \emph{ @param } version list( integer )
\item \emph{ @param } modified Enum < \link{0, 1} >
\item \emph{ @param } after integer
\item \emph{ @param } search character
\item \emph{ @param } attribute character
\item \emph{ @param } attribute.lt character
\item \emph{ @param } attribute.lte character
\item \emph{ @param } attribute.gt character
\item \emph{ @param } attribute.gte character
\item \emph{ @param } attribute.contains character
\item \emph{ @param } attribute.distance character
\item \emph{ @param } attribute.null character
\item \emph{ @param } operation Enum < \link{count} >
\item \emph{ @param } start integer
\item \emph{ @param } stop integer
\item \emph{ @param } exclude.parents integer
\item \emph{ @param } frame integer
\item \emph{ @returnType } list( \link{Localization} ) \cr

\item status code : 200 | Successful retrieval of localization list.

\item return type : array\link{Localization}
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetLocalizationType } \emph{  }
Get localization type.  A localization type is the metadata definition object for a localization. It includes shape, name, description, and may have any number of user-defined attribute types associated with it.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{LocalizationType} \cr

\item status code : 200 | Successful retrieval of localization type.

\item return type : LocalizationType
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetLocalizationTypeList } \emph{  }
Get localization type list.  A localization type is the metadata definition object for a localization. It includes shape, name, description, and may have any number of user-defined attribute types associated with it.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } media.id list( integer )
\item \emph{ @param } type integer
\item \emph{ @returnType } list( \link{LocalizationType} ) \cr

\item status code : 200 | Successful retrieval of localization type list.

\item return type : array\link{LocalizationType}
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetMedia } \emph{  }
Get media.  A media may be an image or a video. Media are a type of entity in Tator, meaning they can be described by user defined attributes.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{Media} \cr

\item status code : 200 | Successful retrieval of media.

\item return type : Media
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetMediaList } \emph{  }
Get media list.  A media may be an image or a video. Media are a type of entity in Tator, meaning they can be described by user defined attributes.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } media.id list( integer )
\item \emph{ @param } type integer
\item \emph{ @param } name character
\item \emph{ @param } md5 character
\item \emph{ @param } after character
\item \emph{ @param } search character
\item \emph{ @param } attribute character
\item \emph{ @param } attribute.lt character
\item \emph{ @param } attribute.lte character
\item \emph{ @param } attribute.gt character
\item \emph{ @param } attribute.gte character
\item \emph{ @param } attribute.contains character
\item \emph{ @param } attribute.distance character
\item \emph{ @param } attribute.null character
\item \emph{ @param } operation Enum < \link{count} >
\item \emph{ @param } start integer
\item \emph{ @param } stop integer
\item \emph{ @returnType } list( \link{Media} ) \cr

\item status code : 200 | Successful retrieval of media list.

\item return type : array\link{Media}
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetMediaNext } \emph{  }
Retrieve ID of next media in a media list.  This endpoint accepts the same query parameters as a GET request to the `Medias` endpoint, but only returns the next media ID from the media passed as a path parameter. This allows iteration through a media list without serializing the entire list, which may be large.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @param } media.id list( integer )
\item \emph{ @param } type integer
\item \emph{ @param } name character
\item \emph{ @param } md5 character
\item \emph{ @param } after character
\item \emph{ @param } search character
\item \emph{ @param } attribute character
\item \emph{ @param } attribute.lt character
\item \emph{ @param } attribute.lte character
\item \emph{ @param } attribute.gt character
\item \emph{ @param } attribute.gte character
\item \emph{ @param } attribute.contains character
\item \emph{ @param } attribute.distance character
\item \emph{ @param } attribute.null character
\item \emph{ @param } operation Enum < \link{count} >
\item \emph{ @param } start integer
\item \emph{ @param } stop integer
\item \emph{ @returnType } \link{MediaNext} \cr

\item status code : 200 | ID of next media in the list corresponding to query.

\item return type : MediaNext
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetMediaPrev } \emph{  }
Retrieve ID of previous media in a media list.  This endpoint accepts the same query parameters as a GET request to the `Medias` endpoint, but only returns the previous media ID from the media passed as a path parameter. This  allows iteration through a media list without serializing the entire list, which may be  large.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @param } media.id list( integer )
\item \emph{ @param } type integer
\item \emph{ @param } name character
\item \emph{ @param } md5 character
\item \emph{ @param } after character
\item \emph{ @param } search character
\item \emph{ @param } attribute character
\item \emph{ @param } attribute.lt character
\item \emph{ @param } attribute.lte character
\item \emph{ @param } attribute.gt character
\item \emph{ @param } attribute.gte character
\item \emph{ @param } attribute.contains character
\item \emph{ @param } attribute.distance character
\item \emph{ @param } attribute.null character
\item \emph{ @param } operation Enum < \link{count} >
\item \emph{ @param } start integer
\item \emph{ @param } stop integer
\item \emph{ @returnType } \link{MediaPrev} \cr

\item status code : 200 | ID of previous media in the list corresponding to query.

\item return type : MediaPrev
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetMediaSections } \emph{  }
Retrieve media counts by section.  This endpoint accepts the same query parameters as a GET request to the `Medias` endpoint, but only returns the number of images and videos per sections.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } media.id list( integer )
\item \emph{ @param } type integer
\item \emph{ @param } name character
\item \emph{ @param } md5 character
\item \emph{ @param } after character
\item \emph{ @param } search character
\item \emph{ @param } attribute character
\item \emph{ @param } attribute.lt character
\item \emph{ @param } attribute.lte character
\item \emph{ @param } attribute.gt character
\item \emph{ @param } attribute.gte character
\item \emph{ @param } attribute.contains character
\item \emph{ @param } attribute.distance character
\item \emph{ @param } attribute.null character
\item \emph{ @param } operation Enum < \link{count} >
\item \emph{ @param } start integer
\item \emph{ @param } stop integer

\item status code : 200 | Successful retrieval of media count per section.

\item return type : map(object)
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetMediaType } \emph{  }
Get media type.  A media type is the metadata definition object for media. It includes file format, name, description, and may have any number of user defined attribute types associated with it.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{MediaType} \cr

\item status code : 200 | Successful retrieval of media type.

\item return type : MediaType
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetMediaTypeList } \emph{  }
Get media type list.  A media type is the metadata definition object for media. It includes file format, name, description, and may have any number of user defined attribute types associated with it.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @returnType } list( \link{MediaType} ) \cr

\item status code : 200 | Successful retrieval of media type list.

\item return type : array\link{MediaType}
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetMembership } \emph{  }
Get membership.  Memberships specify a permission level of a user to a project. There are currently five cumulative permission levels: - `View Only` can only view a project and not change any data. - `Can Edit` can create, modify, and delete annotations. - `Can Transfer` can upload and download media. - `Can Execute` can launch algorithm workflows. - `Full Control` can change project settings, including inviting new members, project name, and    project metadata schema.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{Membership} \cr

\item status code : 200 | Successful retrieval of membership.

\item return type : Membership
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetMembershipList } \emph{  }
Get membership list.  Memberships specify a permission level of a user to a project. There are currently five cumulative permission levels: - `View Only` can only view a project and not change any data. - `Can Edit` can create, modify, and delete annotations. - `Can Transfer` can upload and download media. - `Can Execute` can launch algorithm workflows. - `Full Control` can change project settings, including inviting new members, project name, and    project metadata schema.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @returnType } list( \link{Membership} ) \cr

\item status code : 200 | Successful retrieval of membership list.

\item return type : array\link{Membership}
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetProject } \emph{  }
Get project.  Projects are the object under which all data in Tator is grouped, including user access, metadata definitions, media, and annotations. Data does not cross boundaries between projects.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{Project} \cr

\item status code : 200 | Successful retrieval of project.

\item return type : Project
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetProjectList } \emph{  }
Get project list.  Projects are the object under which all data in Tator is grouped, including user access, metadata definitions, media, and annotations. Data does not cross boundaries between projects.   Returns all projects that a user has access to.

\itemize{
\item \emph{ @returnType } list( \link{Project} ) \cr

\item status code : 200 | Successful retrieval of project list.

\item return type : array\link{Project}
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetSectionAnalysis } \emph{  }
Retrieve analysis results for a media list.  This endpoint uses objects created with the `Analysis` endpoint to perform analysis on filtered media lists.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } media.id list( integer )
\item \emph{ @param } search character
\item \emph{ @param } attribute character
\item \emph{ @param } attribute.lt character
\item \emph{ @param } attribute.lte character
\item \emph{ @param } attribute.gt character
\item \emph{ @param } attribute.gte character
\item \emph{ @param } attribute.contains character
\item \emph{ @param } attribute.distance character
\item \emph{ @param } attribute.null character
\item \emph{ @param } operation Enum < \link{count} >
\item \emph{ @param } start integer
\item \emph{ @param } stop integer
\item \emph{ @returnType } named list( \link{AnyType} ) \cr

\item status code : 200 | Successful retrieval of section analysis.

\item return type : map(AnyType)
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetState } \emph{  }
Get state.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a type of entity in Tator, meaning they can be described by user defined attributes.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{State} \cr

\item status code : 200 | Successful retrieval of state.

\item return type : State
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetStateGraphic } \emph{  }
Get frame(s) of a given localization-associated state.  Use the mode argument to control whether it is an animated gif or a tiled jpg.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @param } mode Enum < \link{animate, tile} >
\item \emph{ @param } fps numeric
\item \emph{ @param } force.scale character

\item status code : 200 | Successful retrieval of state graphic.

\item return type : data.frame
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : data.frame
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : data.frame
\item response headers :

\tabular{ll}{
}
}

\strong{ GetStateList } \emph{  }
Get state list.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a type of entity in Tator, meaning they can be described by user defined attributes.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } media.query character
\item \emph{ @param } media.id list( integer )
\item \emph{ @param } type integer
\item \emph{ @param } version list( integer )
\item \emph{ @param } modified Enum < \link{0, 1} >
\item \emph{ @param } after integer
\item \emph{ @param } search character
\item \emph{ @param } attribute character
\item \emph{ @param } attribute.lt character
\item \emph{ @param } attribute.lte character
\item \emph{ @param } attribute.gt character
\item \emph{ @param } attribute.gte character
\item \emph{ @param } attribute.contains character
\item \emph{ @param } attribute.distance character
\item \emph{ @param } attribute.null character
\item \emph{ @param } operation Enum < \link{count} >
\item \emph{ @param } start integer
\item \emph{ @param } stop integer
\item \emph{ @returnType } list( \link{State} ) \cr

\item status code : 200 | Successful retrieval of state list.

\item return type : array\link{State}
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetStateType } \emph{  }
Get state type.  A state type is the metadata definition object for a state. It includes association type, name, description, and may have any number of user-defined attribute types associated with it.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{StateType} \cr

\item status code : 200 | Successful retrieval of state type.

\item return type : StateType
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetStateTypeList } \emph{  }
Get state type list.  A state type is the metadata definition object for a state. It includes association type, name, description, and may have any number of user-defined attribute types associated with it.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } media.id list( integer )
\item \emph{ @param } type integer
\item \emph{ @returnType } list( \link{StateType} ) \cr

\item status code : 200 | Successful retrieval of state type list.

\item return type : array\link{StateType}
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetTemporaryFile } \emph{  }
Get temporary file.  Temporary files are files stored server side for a defined duration.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{TemporaryFile} \cr

\item status code : 200 | Successful retrieval of temporary file.

\item return type : TemporaryFile
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetTemporaryFileList } \emph{  }
Get temporary file list.  Temporary files are files stored server side for a defined duration.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } expired integer
\item \emph{ @returnType } list( \link{TemporaryFile} ) \cr

\item status code : 200 | Successful retrieval of temporary file list.

\item return type : array\link{TemporaryFile}
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetVersion } \emph{  }
Get version.  Versions allow for multiple \"layers\" of annotations on the same media. Versions are created at the project level, but are only displayed for a given media if that media contains annotations in that version. The version of an annotation can be set by providing it in a POST operation. Currently only localizations and states can have versions.  Versions are used in conjunction with the `modified` flag to determine whether an annotation should be displayed for a given media while annotating.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @returnType } \link{Version} \cr

\item status code : 200 | Successful retrieval of version.

\item return type : Version
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ GetVersionList } \emph{  }
Get version list.  Versions allow for multiple \"layers\" of annotations on the same media. Versions are created at the project level, but are only displayed for a given media if that media contains annotations in that version. The version of an annotation can be set by providing it in a POST operation. Currently only localizations and states can have versions.  Versions are used in conjunction with the `modified` flag to determine whether an annotation should be displayed for a given media while annotating.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } media.id integer
\item \emph{ @returnType } list( \link{Version} ) \cr

\item status code : 200 | Successful retrieval of version list.

\item return type : array\link{Version}
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ LeafSuggestion } \emph{  }
Get list of autocomplete suggestions.  This endpoint is compatible with devbridge suggestion format. It performs a glob search on leaf objects in the project.  <https://github.com/kraaden/autocomplete>

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } ancestor character
\item \emph{ @param } query character
\item \emph{ @param } min.level integer
\item \emph{ @returnType } list( \link{LeafSuggestion} ) \cr

\item status code : 200 | Successful retrieval of suggestions.

\item return type : array\link{LeafSuggestion}
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ MoveVideo } \emph{  }
Moves a video file.  This endpoint creates an Argo workflow that moves an uploaded video file into the appropriate project directory. When the move is complete, the workflow will make a PATCH request to the Media endpoint for the given media ID using the given  `media_files` definitions.  Videos in Tator must be transcoded to a multi-resolution streaming format before they can be viewed or annotated. To launch a transcode on raw uploaded video, use the `Transcode` endpoint, which will create an Argo workflow to perform the transcode and save the video using this endpoint; no further REST calls are required. However, if you would like to perform transcodes locally, this endpoint enables that. The module `tator.transcode` in the tator pip package provides local transcode capability using this endpoint.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @param } move.video.spec \link{MoveVideoSpec}
\item \emph{ @returnType } \link{CreateResponse} \cr

\item status code : 201 | Successful creation of move job.

\item return type : CreateResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ Notify } \emph{  }
Send a notification to administrators.  Uses the Slack API to send a notification to system administrators. This endpoint can only be used by system administrators and must be configured in a Tator deployment's settings.

\itemize{
\item \emph{ @param } notify.spec \link{NotifySpec}

\item status code : 201 | Message sent successfully.

\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
\item status code : 503 | Service not available.

\item response headers :

\tabular{ll}{
}
}

\strong{ Progress } \emph{  }
Broadcast progress update.  Progress messages are sent in the web UI via WebSocket, and are displayed as progress bars associated with individual media files and as a summary in the webpage header. All members of a project can see progress bars from uploads and background jobs initiated by other users within the project. This endpoint accepts an array of messages, allowing for progress messages to be batched into a single request.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } progress.spec list( \link{ProgressSpec} )
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful creation of progress message.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ RegisterAlgorithm } \emph{  }
Register an algorithm argo workflow.  This endpoint replicates the algorithm registration through the admin portal. The provided manifest file must have been uploaded and saved by the SaveAlgorithmManifest endpoint. This endpoint will respond with an error if one of the following conditions occur:  - Provided workflow name is not unique (across projects) - Not all the required fields are present - There are syntax errors with the given manifest file

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } algorithm.spec \link{AlgorithmSpec}
\item \emph{ @returnType } \link{CreateResponse} \cr

\item status code : 201 | Successful creation of registered algorithm.

\item return type : CreateResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ SaveAlgorithmManifest } \emph{  }
Saves an uploaded algorithm manifest to the desired project. It is expected this manifest corresponds with an algorithm workflow to be registered by another endpoint.  Manifest is uploaded via tus, a separate mechanism from the REST API. Once a manifest upload is complete (a .yaml file), the file must be saved to the database using this endpoint.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } algorithm.manifest.spec \link{AlgorithmManifestSpec}
\item \emph{ @returnType } \link{AlgorithmManfiest} \cr

\item status code : 201 | Successful save of algortihm manifest.

\item return type : AlgorithmManfiest
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ Transcode } \emph{  }
Start a transcode.  Videos in Tator must be transcoded to a multi-resolution streaming format before they can be viewed or annotated. This endpoint launches a transcode on raw uploaded video by creating an Argo workflow. The workflow will download the uploaded raw video, transcode it to the proper format, upload the transcoded video, and save the video using the  `SaveVideo` endpoint.  Note that the raw video must be uploaded first via tus, which is a separate mechanism  from the REST API. This endpoint requires a group and run UUID associated with this  upload. If no progress messages were generated during upload, then the group and run  UUIDs can be newly generated.  Transcodes may be cancelled via the `Job` or `JobGroup` endpoints.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } transcode.spec \link{TranscodeSpec}
\item \emph{ @returnType } \link{Transcode} \cr

\item status code : 201 | Successful save of the video in the database.

\item return type : Transcode
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateLeaf } \emph{  }
Update leaf.  Leaves are used to define label hierarchies that can be used for autocompletion of string attribute types. Leaves are a type of entity in Tator, meaning they can be described by user-defined attributes.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @param } leaf.update \link{LeafUpdate}
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful update of leaf.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateLeafList } \emph{  }
Update leaf list.  Leaves are used to define label hierarchies that can be used for autocompletion of string attribute types. Leaves are a type of entity in Tator, meaning they can be described by user-defined attributes.   This method does a bulk update on all leaves matching a query. Only  user-defined attributes may be bulk updated.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } attribute.bulk.update \link{AttributeBulkUpdate}
\item \emph{ @param } ancestor character
\item \emph{ @param } type integer
\item \emph{ @param } name character
\item \emph{ @param } attribute character
\item \emph{ @param } attribute.lt character
\item \emph{ @param } attribute.lte character
\item \emph{ @param } attribute.gt character
\item \emph{ @param } attribute.gte character
\item \emph{ @param } attribute.contains character
\item \emph{ @param } attribute.distance character
\item \emph{ @param } attribute.null character
\item \emph{ @param } operation Enum < \link{count} >
\item \emph{ @param } start integer
\item \emph{ @param } stop integer
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful update of leaf list.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateLeafType } \emph{  }
Update leaf type.  A leaf type is the metadata definition object for a leaf. It includes name, description, and may have any number of user-defined attribute types associated with it.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @param } leaf.type.update \link{LeafTypeUpdate}
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful update of leaf type.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateLocalization } \emph{  }
Update localization.  Localizations are shape annotations drawn on a video or image. Available shapes (`dtype`) are  box, line, or dot. Each shape is parameterized by a different subset of data members: - `box` uses `x`, `y`, `width`, `height`. - `line` uses `x`, `y`, `u`, `v`. - `dot` uses `x` and `y`.  Geometry members may be left null when creating a localization, in which case the shapes may be  drawn later using the redraw capability in the web UI. Localizations are a type of entity in Tator, meaning they can be described by user defined attributes.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @param } localization.update \link{LocalizationUpdate}
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful update of localization.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateLocalizationList } \emph{  }
Update localiazation list.  Localizations are shape annotations drawn on a video or image. Available shapes (`dtype`) are  box, line, or dot. Each shape is parameterized by a different subset of data members: - `box` uses `x`, `y`, `width`, `height`. - `line` uses `x`, `y`, `u`, `v`. - `dot` uses `x` and `y`.  Geometry members may be left null when creating a localization, in which case the shapes may be  drawn later using the redraw capability in the web UI. Localizations are a type of entity in Tator, meaning they can be described by user defined attributes.   This method does a bulk update on all localizations matching a query. Only  user-defined attributes may be bulk updated.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } attribute.bulk.update \link{AttributeBulkUpdate}
\item \emph{ @param } media.query character
\item \emph{ @param } media.id list( integer )
\item \emph{ @param } type integer
\item \emph{ @param } version list( integer )
\item \emph{ @param } modified Enum < \link{0, 1} >
\item \emph{ @param } after integer
\item \emph{ @param } search character
\item \emph{ @param } attribute character
\item \emph{ @param } attribute.lt character
\item \emph{ @param } attribute.lte character
\item \emph{ @param } attribute.gt character
\item \emph{ @param } attribute.gte character
\item \emph{ @param } attribute.contains character
\item \emph{ @param } attribute.distance character
\item \emph{ @param } attribute.null character
\item \emph{ @param } operation Enum < \link{count} >
\item \emph{ @param } start integer
\item \emph{ @param } stop integer
\item \emph{ @param } exclude.parents integer
\item \emph{ @param } frame integer
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful update of localization list.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateLocalizationType } \emph{  }
Update localization type.  A localization type is the metadata definition object for a localization. It includes shape, name, description, and may have any number of user-defined attribute types associated with it.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @param } localization.type.update \link{LocalizationTypeUpdate}
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful update of localization type.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateMedia } \emph{  }
Update media.  A media may be an image or a video. Media are a type of entity in Tator, meaning they can be described by user defined attributes.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @param } media.update \link{MediaUpdate}
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful update of media.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateMediaList } \emph{  }
Update media list.  A media may be an image or a video. Media are a type of entity in Tator, meaning they can be described by user defined attributes.   This method does a bulk update on all media matching a query. Only  user-defined attributes may be bulk updated.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } attribute.bulk.update \link{AttributeBulkUpdate}
\item \emph{ @param } media.id list( integer )
\item \emph{ @param } type integer
\item \emph{ @param } name character
\item \emph{ @param } md5 character
\item \emph{ @param } after character
\item \emph{ @param } search character
\item \emph{ @param } attribute character
\item \emph{ @param } attribute.lt character
\item \emph{ @param } attribute.lte character
\item \emph{ @param } attribute.gt character
\item \emph{ @param } attribute.gte character
\item \emph{ @param } attribute.contains character
\item \emph{ @param } attribute.distance character
\item \emph{ @param } attribute.null character
\item \emph{ @param } operation Enum < \link{count} >
\item \emph{ @param } start integer
\item \emph{ @param } stop integer
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful update of media list.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateMediaType } \emph{  }
Update media type.  A media type is the metadata definition object for media. It includes file format, name, description, and may have any number of user defined attribute types associated with it.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @param } media.type.update \link{MediaTypeUpdate}
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful update of media type.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateMembership } \emph{  }
Update membership.  Memberships specify a permission level of a user to a project. There are currently five cumulative permission levels: - `View Only` can only view a project and not change any data. - `Can Edit` can create, modify, and delete annotations. - `Can Transfer` can upload and download media. - `Can Execute` can launch algorithm workflows. - `Full Control` can change project settings, including inviting new members, project name, and    project metadata schema.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @param } membership.update \link{MembershipUpdate}
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful update of membership.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateProject } \emph{  }
Update project.  Projects are the object under which all data in Tator is grouped, including user access, metadata definitions, media, and annotations. Data does not cross boundaries between projects.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @param } project.spec \link{ProjectSpec}
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful update of project.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateState } \emph{  }
Update state.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a type of entity in Tator, meaning they can be described by user defined attributes.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @param } state.update \link{StateUpdate}
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful update of state.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateStateList } \emph{  }
Update state list.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a type of entity in Tator, meaning they can be described by user defined attributes.   This method does a bulk update on all states matching a query. Only  user-defined attributes may be bulk updated.

\itemize{
\item \emph{ @param } project integer
\item \emph{ @param } attribute.bulk.update \link{AttributeBulkUpdate}
\item \emph{ @param } media.query character
\item \emph{ @param } media.id list( integer )
\item \emph{ @param } type integer
\item \emph{ @param } version list( integer )
\item \emph{ @param } modified Enum < \link{0, 1} >
\item \emph{ @param } after integer
\item \emph{ @param } search character
\item \emph{ @param } attribute character
\item \emph{ @param } attribute.lt character
\item \emph{ @param } attribute.lte character
\item \emph{ @param } attribute.gt character
\item \emph{ @param } attribute.gte character
\item \emph{ @param } attribute.contains character
\item \emph{ @param } attribute.distance character
\item \emph{ @param } attribute.null character
\item \emph{ @param } operation Enum < \link{count} >
\item \emph{ @param } start integer
\item \emph{ @param } stop integer
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful update of state list.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateStateType } \emph{  }
Update state type.  A state type is the metadata definition object for a state. It includes association type, name, description, and may have any number of user-defined attribute types associated with it.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @param } state.type.update \link{StateTypeUpdate}
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful update of state type.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateVersion } \emph{  }
Update version.  Versions allow for multiple \"layers\" of annotations on the same media. Versions are created at the project level, but are only displayed for a given media if that media contains annotations in that version. The version of an annotation can be set by providing it in a POST operation. Currently only localizations and states can have versions.  Versions are used in conjunction with the `modified` flag to determine whether an annotation should be displayed for a given media while annotating.

\itemize{
\item \emph{ @param } id integer
\item \emph{ @param } version.update \link{VersionUpdate}
\item \emph{ @returnType } \link{MessageResponse} \cr

\item status code : 200 | Successful update of version.

\item return type : MessageResponse
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad request.

\item return type : BadRequestResponse
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Not found.

\item return type : NotFoundResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ Whoami } \emph{  }
Get current user.  Retrieves user making the request.

\itemize{
\item \emph{ @returnType } \link{User} \cr

\item status code : 200 | Successful retrieval of user who sent request.

\item return type : User
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  AlgorithmLaunch  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.algorithm.launch.spec <- {"algorithm_name":"My Algorithm","media_ids":[1,5,10]} # AlgorithmLaunchSpec | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$AlgorithmLaunch(var.project, var.algorithm.launch.spec)


####################  CreateAnalysis  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.analysis.spec <- {"data_query":"_meta:1","name":"Boxes"} # AnalysisSpec | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$CreateAnalysis(var.project, var.analysis.spec)


####################  CreateLeafList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.leaf.spec <- [LeafSpec$new()] # array[LeafSpec] | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$CreateLeafList(var.project, var.leaf.spec)


####################  CreateLeafType  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.leaf.type.spec <- {"attribute_types":[{"default":false,"dtype":"bool","name":"My Boolean"},{"default":0,"dtype":"int","maximum":1,"minimum":-1,"name":"My Integer"},{"default":0.0,"dtype":"float","maximum":1.0,"minimum":-1.0,"name":"My Float"},{"choices":["a","b","c"],"default":"a","dtype":"enum","labels":["a","b","c"],"name":"My Enumeration"},{"autocomplete":{"serviceUrl":"https://www.example.com/suggestion"},"default":"---","dtype":"string","name":"My String"},{"dtype":"datetime","name":"My Datetime","use_current":true},{"default":[-179.0,90.0],"dtype":"geopos","name":"My Geoposition"}],"name":"My leaf type"} # LeafTypeSpec | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$CreateLeafType(var.project, var.leaf.type.spec)


####################  CreateLocalizationList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.localization.spec <- [{"My First Attribute":"value1","My Second Attribute":"value2","frame":1000,"height":0.4,"media_id":1,"type":1,"width":0.3,"x":0.1,"y":0.2}] # array[LocalizationSpec] | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$CreateLocalizationList(var.project, var.localization.spec)


####################  CreateLocalizationType  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.localization.type.spec <- {"attribute_types":[{"default":false,"dtype":"bool","name":"My Boolean"},{"default":0,"dtype":"int","maximum":1,"minimum":-1,"name":"My Integer"},{"default":0.0,"dtype":"float","maximum":1.0,"minimum":-1.0,"name":"My Float"},{"choices":["a","b","c"],"default":"a","dtype":"enum","labels":["a","b","c"],"name":"My Enumeration"},{"autocomplete":{"serviceUrl":"https://www.example.com/suggestion"},"default":"---","dtype":"string","name":"My String"},{"dtype":"datetime","name":"My Datetime","use_current":true},{"default":[-179.0,90.0],"dtype":"geopos","name":"My Geoposition"}],"dtype":"box","media_types":[1],"name":"My localization type"} # LocalizationTypeSpec | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$CreateLocalizationType(var.project, var.localization.type.spec)


####################  CreateMedia  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.media.spec <- MediaSpec$new() # MediaSpec | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$CreateMedia(var.project, var.media.spec)


####################  CreateMediaType  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.media.type.spec <- {"attribute_types":[{"default":false,"dtype":"bool","name":"My Boolean"},{"default":0,"dtype":"int","maximum":1,"minimum":-1,"name":"My Integer"},{"default":0.0,"dtype":"float","maximum":1.0,"minimum":-1.0,"name":"My Float"},{"choices":["a","b","c"],"default":"a","dtype":"enum","labels":["a","b","c"],"name":"My Enumeration"},{"autocomplete":{"serviceUrl":"https://www.example.com/suggestion"},"default":"---","dtype":"string","name":"My String"},{"dtype":"datetime","name":"My Datetime","use_current":true},{"default":[-179.0,90.0],"dtype":"geopos","name":"My Geoposition"}],"dtype":"video","name":"My media type"} # MediaTypeSpec | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$CreateMediaType(var.project, var.media.type.spec)


####################  CreateMembership  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.membership.spec <- {"permission":"Full Control","user":1} # MembershipSpec | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$CreateMembership(var.project, var.membership.spec)


####################  CreateObtainAuthToken  ####################

library(tator)
var.credentials <- Credentials$new() # Credentials | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$CreateObtainAuthToken(credentials=var.credentials)


####################  CreateProgressSummaryAPI  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.progress.summary.spec <- ProgressSummarySpec$new() # ProgressSummarySpec | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$CreateProgressSummaryAPI(var.project, var.progress.summary.spec)


####################  CreateProject  ####################

library(tator)
var.project.spec <- {"name":"My Project","summary":"First project"} # ProjectSpec | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$CreateProject(var.project.spec)


####################  CreateStateList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.state.spec <- [{"My First Attribute":"value1","My Second Attribute":"value2","frame":1000,"media_ids":[1],"type":1}] # array[StateSpec] | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$CreateStateList(var.project, var.state.spec)


####################  CreateStateType  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.state.type.spec <- {"association":"Frame","attribute_types":[{"default":false,"dtype":"bool","name":"My Boolean"},{"default":0,"dtype":"int","maximum":1,"minimum":-1,"name":"My Integer"},{"default":0.0,"dtype":"float","maximum":1.0,"minimum":-1.0,"name":"My Float"},{"choices":["a","b","c"],"default":"a","dtype":"enum","labels":["a","b","c"],"name":"My Enumeration"},{"autocomplete":{"serviceUrl":"https://www.example.com/suggestion"},"default":"---","dtype":"string","name":"My String"},{"dtype":"datetime","name":"My Datetime","use_current":true},{"default":[-179.0,90.0],"dtype":"geopos","name":"My Geoposition"}],"media_types":[1],"name":"My state type"} # StateTypeSpec | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$CreateStateType(var.project, var.state.type.spec)


####################  CreateTemporaryFile  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.temporary.file.spec <- TemporaryFileSpec$new() # TemporaryFileSpec | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$CreateTemporaryFile(var.project, var.temporary.file.spec)


####################  CreateVersion  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.version.spec <- {"bases":[1],"description":"New description","name":"My new version","show_empty":true} # VersionSpec | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$CreateVersion(var.project, var.version.spec)


####################  DeleteAlgorithm  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a registered algorithm workflow.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$DeleteAlgorithm(var.id)


####################  DeleteJob  ####################

library(tator)
var.run.uid <- 'run.uid_example' # character | A uuid1 string identifying to single Job.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$DeleteJob(var.run.uid)


####################  DeleteJobGroup  ####################

library(tator)
var.group.id <- 'group.id_example' # character | A uuid1 string identifying a group of jobs.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$DeleteJobGroup(var.group.id)


####################  DeleteLeaf  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a leaf.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$DeleteLeaf(var.id)


####################  DeleteLeafList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.ancestor <- 'ancestor_example' # character | Get descendents of a leaf element (inclusive), by path (i.e. ITIS.Animalia).
var.type <- 56 # integer | Unique integer identifying a leaf type.
var.name <- 'name_example' # character | Name of the leaf element.
var.attribute <- 'attribute_example' # character | Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lt <- 'attribute.lt_example' # character | Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lte <- 'attribute.lte_example' # character | Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gt <- 'attribute.gt_example' # character | Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gte <- 'attribute.gte_example' # character | Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.contains <- 'attribute.contains_example' # character | Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.distance <- 'attribute.distance_example' # character | Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
var.attribute.null <- 'attribute.null_example' # character | Attribute null filter. Returns elements for which a given attribute is not defined.
var.operation <- 'operation_example' # character | Set to \"count\" to return a count of objects instead of the objects.
var.start <- 56 # integer | Pagination start index. Index of the first item in a larger list to return.
var.stop <- 56 # integer | Pagination start index. Non-inclusive ndex of the last item in a larger list to return.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$DeleteLeafList(var.project, ancestor=var.ancestor, type=var.type, name=var.name, attribute=var.attribute, attribute.lt=var.attribute.lt, attribute.lte=var.attribute.lte, attribute.gt=var.attribute.gt, attribute.gte=var.attribute.gte, attribute.contains=var.attribute.contains, attribute.distance=var.attribute.distance, attribute.null=var.attribute.null, operation=var.operation, start=var.start, stop=var.stop)


####################  DeleteLeafType  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying an leaf type.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$DeleteLeafType(var.id)


####################  DeleteLocalization  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a localization.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$DeleteLocalization(var.id)


####################  DeleteLocalizationList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.media.query <- 'media.query_example' # character | Query string used to filter media IDs. If supplied, media_id will be ignored.
var.media.id <- [56] # array[integer] | Comma-separated list of media IDs.
var.type <- 56 # integer | Unique integer identifying a annotation type.
var.version <- [56] # array[integer] | List of integers representing versions to fetch
var.modified <- 1 # integer | Whether to return original or modified annotations, 0 or 1.
var.after <- 56 # integer | If given, all results returned will be after the localization with this ID. The `start` and `stop` parameters are relative to this modified range.
var.search <- '\"My search string\"' # character | Lucene query syntax string for use with Elasticsearch. See `reference <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
var.attribute <- 'attribute_example' # character | Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lt <- 'attribute.lt_example' # character | Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lte <- 'attribute.lte_example' # character | Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gt <- 'attribute.gt_example' # character | Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gte <- 'attribute.gte_example' # character | Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.contains <- 'attribute.contains_example' # character | Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.distance <- 'attribute.distance_example' # character | Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
var.attribute.null <- 'attribute.null_example' # character | Attribute null filter. Returns elements for which a given attribute is not defined.
var.operation <- 'operation_example' # character | Set to \"count\" to return a count of objects instead of the objects.
var.start <- 56 # integer | Pagination start index. Index of the first item in a larger list to return.
var.stop <- 56 # integer | Pagination start index. Non-inclusive ndex of the last item in a larger list to return.
var.exclude.parents <- 0 # integer | If a clone is present, do not send parent. (0 or 1)
var.frame <- 56 # integer | Frame number of this localization if it is in a video.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$DeleteLocalizationList(var.project, media.query=var.media.query, media.id=var.media.id, type=var.type, version=var.version, modified=var.modified, after=var.after, search=var.search, attribute=var.attribute, attribute.lt=var.attribute.lt, attribute.lte=var.attribute.lte, attribute.gt=var.attribute.gt, attribute.gte=var.attribute.gte, attribute.contains=var.attribute.contains, attribute.distance=var.attribute.distance, attribute.null=var.attribute.null, operation=var.operation, start=var.start, stop=var.stop, exclude.parents=var.exclude.parents, frame=var.frame)


####################  DeleteLocalizationType  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying an localization type.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$DeleteLocalizationType(var.id)


####################  DeleteMedia  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a media.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$DeleteMedia(var.id)


####################  DeleteMediaList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.media.id <- [56] # array[integer] | List of integers identifying media.
var.type <- 56 # integer | Unique integer identifying media type.
var.name <- 'name_example' # character | Name of the media to filter on.
var.md5 <- 'md5_example' # character | MD5 sum of the media file.
var.after <- 'after_example' # character | If given, all results returned will be after the file with this filename. The `start` and `stop` parameters are relative to this modified range.
var.search <- '\"My search string\"' # character | Lucene query syntax string for use with Elasticsearch. See `reference <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
var.attribute <- 'attribute_example' # character | Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lt <- 'attribute.lt_example' # character | Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lte <- 'attribute.lte_example' # character | Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gt <- 'attribute.gt_example' # character | Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gte <- 'attribute.gte_example' # character | Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.contains <- 'attribute.contains_example' # character | Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.distance <- 'attribute.distance_example' # character | Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
var.attribute.null <- 'attribute.null_example' # character | Attribute null filter. Returns elements for which a given attribute is not defined.
var.operation <- 'operation_example' # character | Set to \"count\" to return a count of objects instead of the objects.
var.start <- 56 # integer | Pagination start index. Index of the first item in a larger list to return.
var.stop <- 56 # integer | Pagination start index. Non-inclusive ndex of the last item in a larger list to return.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$DeleteMediaList(var.project, media.id=var.media.id, type=var.type, name=var.name, md5=var.md5, after=var.after, search=var.search, attribute=var.attribute, attribute.lt=var.attribute.lt, attribute.lte=var.attribute.lte, attribute.gt=var.attribute.gt, attribute.gte=var.attribute.gte, attribute.contains=var.attribute.contains, attribute.distance=var.attribute.distance, attribute.null=var.attribute.null, operation=var.operation, start=var.start, stop=var.stop)


####################  DeleteMediaType  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying an media type.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$DeleteMediaType(var.id)


####################  DeleteMembership  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a membership.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$DeleteMembership(var.id)


####################  DeleteProject  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a project.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$DeleteProject(var.id)


####################  DeleteState  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a state.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$DeleteState(var.id)


####################  DeleteStateList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.media.query <- 'media.query_example' # character | Query string used to filter media IDs. If supplied, media_id will be ignored.
var.media.id <- [56] # array[integer] | Comma-separated list of media IDs.
var.type <- 56 # integer | Unique integer identifying a annotation type.
var.version <- [56] # array[integer] | List of integers representing versions to fetch
var.modified <- 1 # integer | Whether to return original or modified annotations, 0 or 1.
var.after <- 56 # integer | If given, all results returned will be after the localization with this ID. The `start` and `stop` parameters are relative to this modified range.
var.search <- '\"My search string\"' # character | Lucene query syntax string for use with Elasticsearch. See `reference <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
var.attribute <- 'attribute_example' # character | Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lt <- 'attribute.lt_example' # character | Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lte <- 'attribute.lte_example' # character | Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gt <- 'attribute.gt_example' # character | Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gte <- 'attribute.gte_example' # character | Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.contains <- 'attribute.contains_example' # character | Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.distance <- 'attribute.distance_example' # character | Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
var.attribute.null <- 'attribute.null_example' # character | Attribute null filter. Returns elements for which a given attribute is not defined.
var.operation <- 'operation_example' # character | Set to \"count\" to return a count of objects instead of the objects.
var.start <- 56 # integer | Pagination start index. Index of the first item in a larger list to return.
var.stop <- 56 # integer | Pagination start index. Non-inclusive ndex of the last item in a larger list to return.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$DeleteStateList(var.project, media.query=var.media.query, media.id=var.media.id, type=var.type, version=var.version, modified=var.modified, after=var.after, search=var.search, attribute=var.attribute, attribute.lt=var.attribute.lt, attribute.lte=var.attribute.lte, attribute.gt=var.attribute.gt, attribute.gte=var.attribute.gte, attribute.contains=var.attribute.contains, attribute.distance=var.attribute.distance, attribute.null=var.attribute.null, operation=var.operation, start=var.start, stop=var.stop)


####################  DeleteStateType  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a state type.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$DeleteStateType(var.id)


####################  DeleteTemporaryFile  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a temporary file.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$DeleteTemporaryFile(var.id)


####################  DeleteTemporaryFileList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.expired <- 0 # integer | If greater than 0 will return only expired files

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$DeleteTemporaryFileList(var.project, expired=var.expired)


####################  DeleteVersion  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a version.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$DeleteVersion(var.id)


####################  GetAlgorithmList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetAlgorithmList(var.project)


####################  GetAnalysisList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetAnalysisList(var.project)


####################  GetClip  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a media object.
var.frame.ranges <- ['[\"0:30\",\"50:90\"]'] # array[character] | Comma-seperated list of frame ranges to capture.
var.quality <- 56 # integer | Source resolution to use (default to highest quality)

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetClip(var.id, var.frame.ranges, quality=var.quality)


####################  GetFrame  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a media object.
var.frames <- [0] # array[integer] | Comma-seperated list of frames to capture.
var.tile <- 'tile_example' # character | wxh, if not supplied is made as squarish as possible.
var.roi <- 'roi_example' # character | w:h:x:y, optionally crop each frame to a given roi in relative coordinates.
var.animate <- 56 # integer | If not tiling, animate each frame at a given fps in a gif.
var.quality <- 56 # integer | Source resolution to use (default to highest quality)

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetFrame(var.id, frames=var.frames, tile=var.tile, roi=var.roi, animate=var.animate, quality=var.quality)


####################  GetLeaf  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a leaf.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetLeaf(var.id)


####################  GetLeafList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.ancestor <- 'ancestor_example' # character | Get descendents of a leaf element (inclusive), by path (i.e. ITIS.Animalia).
var.type <- 56 # integer | Unique integer identifying a leaf type.
var.name <- 'name_example' # character | Name of the leaf element.
var.attribute <- 'attribute_example' # character | Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lt <- 'attribute.lt_example' # character | Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lte <- 'attribute.lte_example' # character | Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gt <- 'attribute.gt_example' # character | Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gte <- 'attribute.gte_example' # character | Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.contains <- 'attribute.contains_example' # character | Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.distance <- 'attribute.distance_example' # character | Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
var.attribute.null <- 'attribute.null_example' # character | Attribute null filter. Returns elements for which a given attribute is not defined.
var.operation <- 'operation_example' # character | Set to \"count\" to return a count of objects instead of the objects.
var.start <- 56 # integer | Pagination start index. Index of the first item in a larger list to return.
var.stop <- 56 # integer | Pagination start index. Non-inclusive ndex of the last item in a larger list to return.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetLeafList(var.project, ancestor=var.ancestor, type=var.type, name=var.name, attribute=var.attribute, attribute.lt=var.attribute.lt, attribute.lte=var.attribute.lte, attribute.gt=var.attribute.gt, attribute.gte=var.attribute.gte, attribute.contains=var.attribute.contains, attribute.distance=var.attribute.distance, attribute.null=var.attribute.null, operation=var.operation, start=var.start, stop=var.stop)


####################  GetLeafType  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying an leaf type.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetLeafType(var.id)


####################  GetLeafTypeList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetLeafTypeList(var.project)


####################  GetLocalization  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a localization.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetLocalization(var.id)


####################  GetLocalizationGraphic  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a localization.
var.force.scale <- 'force.scale_example' # character | Size of final image to return. This forces scaling the image. Default is the localization size and margins define the image size. Example: 100x100 
var.use.default.margins <- TRUE # character | Use default margins for localization types.  Default margins (x,y pixels) - dot: (10,10) line:  (10,10) box: (0,0) 
var.margin.x <- 56 # integer | Pixel margin to apply to the height of the localization when generating the image. Valid only if use_default_margins is false. 
var.margin.y <- 56 # integer | Pixel margin to apply to the width of the localization when generating the image. Valid only if use_default_margins is false. 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetLocalizationGraphic(var.id, force.scale=var.force.scale, use.default.margins=var.use.default.margins, margin.x=var.margin.x, margin.y=var.margin.y)


####################  GetLocalizationList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.media.query <- 'media.query_example' # character | Query string used to filter media IDs. If supplied, media_id will be ignored.
var.media.id <- [56] # array[integer] | Comma-separated list of media IDs.
var.type <- 56 # integer | Unique integer identifying a annotation type.
var.version <- [56] # array[integer] | List of integers representing versions to fetch
var.modified <- 1 # integer | Whether to return original or modified annotations, 0 or 1.
var.after <- 56 # integer | If given, all results returned will be after the localization with this ID. The `start` and `stop` parameters are relative to this modified range.
var.search <- '\"My search string\"' # character | Lucene query syntax string for use with Elasticsearch. See `reference <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
var.attribute <- 'attribute_example' # character | Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lt <- 'attribute.lt_example' # character | Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lte <- 'attribute.lte_example' # character | Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gt <- 'attribute.gt_example' # character | Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gte <- 'attribute.gte_example' # character | Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.contains <- 'attribute.contains_example' # character | Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.distance <- 'attribute.distance_example' # character | Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
var.attribute.null <- 'attribute.null_example' # character | Attribute null filter. Returns elements for which a given attribute is not defined.
var.operation <- 'operation_example' # character | Set to \"count\" to return a count of objects instead of the objects.
var.start <- 56 # integer | Pagination start index. Index of the first item in a larger list to return.
var.stop <- 56 # integer | Pagination start index. Non-inclusive ndex of the last item in a larger list to return.
var.exclude.parents <- 0 # integer | If a clone is present, do not send parent. (0 or 1)
var.frame <- 56 # integer | Frame number of this localization if it is in a video.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetLocalizationList(var.project, media.query=var.media.query, media.id=var.media.id, type=var.type, version=var.version, modified=var.modified, after=var.after, search=var.search, attribute=var.attribute, attribute.lt=var.attribute.lt, attribute.lte=var.attribute.lte, attribute.gt=var.attribute.gt, attribute.gte=var.attribute.gte, attribute.contains=var.attribute.contains, attribute.distance=var.attribute.distance, attribute.null=var.attribute.null, operation=var.operation, start=var.start, stop=var.stop, exclude.parents=var.exclude.parents, frame=var.frame)


####################  GetLocalizationType  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying an localization type.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetLocalizationType(var.id)


####################  GetLocalizationTypeList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.media.id <- [56] # array[integer] | List of unique integers identifying a media.
var.type <- 56 # integer | Deprecated. Use `LocalizationType` endpoint to retrieve individual localization type by ID.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetLocalizationTypeList(var.project, media.id=var.media.id, type=var.type)


####################  GetMedia  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a media.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetMedia(var.id)


####################  GetMediaList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.media.id <- [56] # array[integer] | List of integers identifying media.
var.type <- 56 # integer | Unique integer identifying media type.
var.name <- 'name_example' # character | Name of the media to filter on.
var.md5 <- 'md5_example' # character | MD5 sum of the media file.
var.after <- 'after_example' # character | If given, all results returned will be after the file with this filename. The `start` and `stop` parameters are relative to this modified range.
var.search <- '\"My search string\"' # character | Lucene query syntax string for use with Elasticsearch. See `reference <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
var.attribute <- 'attribute_example' # character | Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lt <- 'attribute.lt_example' # character | Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lte <- 'attribute.lte_example' # character | Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gt <- 'attribute.gt_example' # character | Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gte <- 'attribute.gte_example' # character | Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.contains <- 'attribute.contains_example' # character | Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.distance <- 'attribute.distance_example' # character | Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
var.attribute.null <- 'attribute.null_example' # character | Attribute null filter. Returns elements for which a given attribute is not defined.
var.operation <- 'operation_example' # character | Set to \"count\" to return a count of objects instead of the objects.
var.start <- 56 # integer | Pagination start index. Index of the first item in a larger list to return.
var.stop <- 56 # integer | Pagination start index. Non-inclusive ndex of the last item in a larger list to return.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetMediaList(var.project, media.id=var.media.id, type=var.type, name=var.name, md5=var.md5, after=var.after, search=var.search, attribute=var.attribute, attribute.lt=var.attribute.lt, attribute.lte=var.attribute.lte, attribute.gt=var.attribute.gt, attribute.gte=var.attribute.gte, attribute.contains=var.attribute.contains, attribute.distance=var.attribute.distance, attribute.null=var.attribute.null, operation=var.operation, start=var.start, stop=var.stop)


####################  GetMediaNext  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a media object.
var.media.id <- [56] # array[integer] | List of integers identifying media.
var.type <- 56 # integer | Unique integer identifying media type.
var.name <- 'name_example' # character | Name of the media to filter on.
var.md5 <- 'md5_example' # character | MD5 sum of the media file.
var.after <- 'after_example' # character | If given, all results returned will be after the file with this filename. The `start` and `stop` parameters are relative to this modified range.
var.search <- '\"My search string\"' # character | Lucene query syntax string for use with Elasticsearch. See `reference <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
var.attribute <- 'attribute_example' # character | Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lt <- 'attribute.lt_example' # character | Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lte <- 'attribute.lte_example' # character | Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gt <- 'attribute.gt_example' # character | Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gte <- 'attribute.gte_example' # character | Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.contains <- 'attribute.contains_example' # character | Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.distance <- 'attribute.distance_example' # character | Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
var.attribute.null <- 'attribute.null_example' # character | Attribute null filter. Returns elements for which a given attribute is not defined.
var.operation <- 'operation_example' # character | Set to \"count\" to return a count of objects instead of the objects.
var.start <- 56 # integer | Pagination start index. Index of the first item in a larger list to return.
var.stop <- 56 # integer | Pagination start index. Non-inclusive ndex of the last item in a larger list to return.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetMediaNext(var.id, media.id=var.media.id, type=var.type, name=var.name, md5=var.md5, after=var.after, search=var.search, attribute=var.attribute, attribute.lt=var.attribute.lt, attribute.lte=var.attribute.lte, attribute.gt=var.attribute.gt, attribute.gte=var.attribute.gte, attribute.contains=var.attribute.contains, attribute.distance=var.attribute.distance, attribute.null=var.attribute.null, operation=var.operation, start=var.start, stop=var.stop)


####################  GetMediaPrev  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a media object.
var.media.id <- [56] # array[integer] | List of integers identifying media.
var.type <- 56 # integer | Unique integer identifying media type.
var.name <- 'name_example' # character | Name of the media to filter on.
var.md5 <- 'md5_example' # character | MD5 sum of the media file.
var.after <- 'after_example' # character | If given, all results returned will be after the file with this filename. The `start` and `stop` parameters are relative to this modified range.
var.search <- '\"My search string\"' # character | Lucene query syntax string for use with Elasticsearch. See `reference <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
var.attribute <- 'attribute_example' # character | Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lt <- 'attribute.lt_example' # character | Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lte <- 'attribute.lte_example' # character | Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gt <- 'attribute.gt_example' # character | Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gte <- 'attribute.gte_example' # character | Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.contains <- 'attribute.contains_example' # character | Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.distance <- 'attribute.distance_example' # character | Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
var.attribute.null <- 'attribute.null_example' # character | Attribute null filter. Returns elements for which a given attribute is not defined.
var.operation <- 'operation_example' # character | Set to \"count\" to return a count of objects instead of the objects.
var.start <- 56 # integer | Pagination start index. Index of the first item in a larger list to return.
var.stop <- 56 # integer | Pagination start index. Non-inclusive ndex of the last item in a larger list to return.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetMediaPrev(var.id, media.id=var.media.id, type=var.type, name=var.name, md5=var.md5, after=var.after, search=var.search, attribute=var.attribute, attribute.lt=var.attribute.lt, attribute.lte=var.attribute.lte, attribute.gt=var.attribute.gt, attribute.gte=var.attribute.gte, attribute.contains=var.attribute.contains, attribute.distance=var.attribute.distance, attribute.null=var.attribute.null, operation=var.operation, start=var.start, stop=var.stop)


####################  GetMediaSections  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.media.id <- [56] # array[integer] | List of integers identifying media.
var.type <- 56 # integer | Unique integer identifying media type.
var.name <- 'name_example' # character | Name of the media to filter on.
var.md5 <- 'md5_example' # character | MD5 sum of the media file.
var.after <- 'after_example' # character | If given, all results returned will be after the file with this filename. The `start` and `stop` parameters are relative to this modified range.
var.search <- '\"My search string\"' # character | Lucene query syntax string for use with Elasticsearch. See `reference <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
var.attribute <- 'attribute_example' # character | Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lt <- 'attribute.lt_example' # character | Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lte <- 'attribute.lte_example' # character | Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gt <- 'attribute.gt_example' # character | Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gte <- 'attribute.gte_example' # character | Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.contains <- 'attribute.contains_example' # character | Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.distance <- 'attribute.distance_example' # character | Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
var.attribute.null <- 'attribute.null_example' # character | Attribute null filter. Returns elements for which a given attribute is not defined.
var.operation <- 'operation_example' # character | Set to \"count\" to return a count of objects instead of the objects.
var.start <- 56 # integer | Pagination start index. Index of the first item in a larger list to return.
var.stop <- 56 # integer | Pagination start index. Non-inclusive ndex of the last item in a larger list to return.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetMediaSections(var.project, media.id=var.media.id, type=var.type, name=var.name, md5=var.md5, after=var.after, search=var.search, attribute=var.attribute, attribute.lt=var.attribute.lt, attribute.lte=var.attribute.lte, attribute.gt=var.attribute.gt, attribute.gte=var.attribute.gte, attribute.contains=var.attribute.contains, attribute.distance=var.attribute.distance, attribute.null=var.attribute.null, operation=var.operation, start=var.start, stop=var.stop)


####################  GetMediaType  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying an media type.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetMediaType(var.id)


####################  GetMediaTypeList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetMediaTypeList(var.project)


####################  GetMembership  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a membership.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetMembership(var.id)


####################  GetMembershipList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetMembershipList(var.project)


####################  GetProject  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a project.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetProject(var.id)


####################  GetProjectList  ####################

library(tator)

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetProjectList()


####################  GetSectionAnalysis  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.media.id <- [56] # array[integer] | Unique integer identifying a media. Use this to do analyis on a single file instead of sections.
var.search <- '\"My search string\"' # character | Lucene query syntax string for use with Elasticsearch. See `reference <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
var.attribute <- 'attribute_example' # character | Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lt <- 'attribute.lt_example' # character | Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lte <- 'attribute.lte_example' # character | Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gt <- 'attribute.gt_example' # character | Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gte <- 'attribute.gte_example' # character | Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.contains <- 'attribute.contains_example' # character | Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.distance <- 'attribute.distance_example' # character | Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
var.attribute.null <- 'attribute.null_example' # character | Attribute null filter. Returns elements for which a given attribute is not defined.
var.operation <- 'operation_example' # character | Set to \"count\" to return a count of objects instead of the objects.
var.start <- 56 # integer | Pagination start index. Index of the first item in a larger list to return.
var.stop <- 56 # integer | Pagination start index. Non-inclusive ndex of the last item in a larger list to return.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetSectionAnalysis(var.project, media.id=var.media.id, search=var.search, attribute=var.attribute, attribute.lt=var.attribute.lt, attribute.lte=var.attribute.lte, attribute.gt=var.attribute.gt, attribute.gte=var.attribute.gte, attribute.contains=var.attribute.contains, attribute.distance=var.attribute.distance, attribute.null=var.attribute.null, operation=var.operation, start=var.start, stop=var.stop)


####################  GetState  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a state.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetState(var.id)


####################  GetStateGraphic  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a state.
var.mode <- 'animate' # character | Whether to animate or tile.
var.fps <- 2 # numeric | Frame rate if `mode` is `animate`.
var.force.scale <- '240x240' # character | wxh to force each tile prior to stich

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetStateGraphic(var.id, mode=var.mode, fps=var.fps, force.scale=var.force.scale)


####################  GetStateList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.media.query <- 'media.query_example' # character | Query string used to filter media IDs. If supplied, media_id will be ignored.
var.media.id <- [56] # array[integer] | Comma-separated list of media IDs.
var.type <- 56 # integer | Unique integer identifying a annotation type.
var.version <- [56] # array[integer] | List of integers representing versions to fetch
var.modified <- 1 # integer | Whether to return original or modified annotations, 0 or 1.
var.after <- 56 # integer | If given, all results returned will be after the localization with this ID. The `start` and `stop` parameters are relative to this modified range.
var.search <- '\"My search string\"' # character | Lucene query syntax string for use with Elasticsearch. See `reference <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
var.attribute <- 'attribute_example' # character | Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lt <- 'attribute.lt_example' # character | Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lte <- 'attribute.lte_example' # character | Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gt <- 'attribute.gt_example' # character | Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gte <- 'attribute.gte_example' # character | Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.contains <- 'attribute.contains_example' # character | Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.distance <- 'attribute.distance_example' # character | Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
var.attribute.null <- 'attribute.null_example' # character | Attribute null filter. Returns elements for which a given attribute is not defined.
var.operation <- 'operation_example' # character | Set to \"count\" to return a count of objects instead of the objects.
var.start <- 56 # integer | Pagination start index. Index of the first item in a larger list to return.
var.stop <- 56 # integer | Pagination start index. Non-inclusive ndex of the last item in a larger list to return.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetStateList(var.project, media.query=var.media.query, media.id=var.media.id, type=var.type, version=var.version, modified=var.modified, after=var.after, search=var.search, attribute=var.attribute, attribute.lt=var.attribute.lt, attribute.lte=var.attribute.lte, attribute.gt=var.attribute.gt, attribute.gte=var.attribute.gte, attribute.contains=var.attribute.contains, attribute.distance=var.attribute.distance, attribute.null=var.attribute.null, operation=var.operation, start=var.start, stop=var.stop)


####################  GetStateType  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a state type.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetStateType(var.id)


####################  GetStateTypeList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.media.id <- [56] # array[integer] | List of unique integers identifying a media.
var.type <- 56 # integer | Deprecated. Use `LocalizationType` endpoint to retrieve individual localization type by ID.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetStateTypeList(var.project, media.id=var.media.id, type=var.type)


####################  GetTemporaryFile  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a temporary file.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetTemporaryFile(var.id)


####################  GetTemporaryFileList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.expired <- 0 # integer | If greater than 0 will return only expired files

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetTemporaryFileList(var.project, expired=var.expired)


####################  GetVersion  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a version.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetVersion(var.id)


####################  GetVersionList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.media.id <- 56 # integer | Unique integer identifying a media.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$GetVersionList(var.project, media.id=var.media.id)


####################  LeafSuggestion  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.ancestor <- 'ancestor_example' # character | Get descendents of a leaf element (inclusive), by path (i.e. ITIS.Animalia).
var.query <- 'query_example' # character | String to search for matching names.
var.min.level <- 56 # integer | Integer specifying level of results that may be returned. For example, 2 refers to grandchildren of the level specified by the `ancestor` parameter.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$LeafSuggestion(var.project, var.ancestor, var.query, min.level=var.min.level)


####################  MoveVideo  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a media.
var.move.video.spec <- MoveVideoSpec$new() # MoveVideoSpec | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$MoveVideo(var.id, move.video.spec=var.move.video.spec)


####################  Notify  ####################

library(tator)
var.notify.spec <- NotifySpec$new() # NotifySpec | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$Notify(var.notify.spec)


####################  Progress  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.progress.spec <- [{"gid":"b722e83e-8272-11ea-8e10-000c294f07cf","job_type":"algorithm","media_ids":"1,2","message":"Job started!","name":"name_of_file.mp4","progress":70,"sections":"Section 1,Section 2","state":"started","uid":"b43d7e54-8272-11ea-8e10-000c294f07cf"}] # array[ProgressSpec] | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$Progress(var.project, var.progress.spec)


####################  RegisterAlgorithm  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.algorithm.spec <- AlgorithmSpec$new() # AlgorithmSpec | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$RegisterAlgorithm(var.project, var.algorithm.spec)


####################  SaveAlgorithmManifest  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project
var.algorithm.manifest.spec <- AlgorithmManifestSpec$new() # AlgorithmManifestSpec | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$SaveAlgorithmManifest(var.project, var.algorithm.manifest.spec)


####################  Transcode  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.transcode.spec <- TranscodeSpec$new() # TranscodeSpec | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$Transcode(var.project, var.transcode.spec)


####################  UpdateLeaf  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a leaf.
var.leaf.update <- LeafUpdate$new() # LeafUpdate | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$UpdateLeaf(var.id, var.leaf.update)


####################  UpdateLeafList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.attribute.bulk.update <- AttributeBulkUpdate$new() # AttributeBulkUpdate | 
var.ancestor <- 'ancestor_example' # character | Get descendents of a leaf element (inclusive), by path (i.e. ITIS.Animalia).
var.type <- 56 # integer | Unique integer identifying a leaf type.
var.name <- 'name_example' # character | Name of the leaf element.
var.attribute <- 'attribute_example' # character | Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lt <- 'attribute.lt_example' # character | Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lte <- 'attribute.lte_example' # character | Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gt <- 'attribute.gt_example' # character | Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gte <- 'attribute.gte_example' # character | Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.contains <- 'attribute.contains_example' # character | Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.distance <- 'attribute.distance_example' # character | Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
var.attribute.null <- 'attribute.null_example' # character | Attribute null filter. Returns elements for which a given attribute is not defined.
var.operation <- 'operation_example' # character | Set to \"count\" to return a count of objects instead of the objects.
var.start <- 56 # integer | Pagination start index. Index of the first item in a larger list to return.
var.stop <- 56 # integer | Pagination start index. Non-inclusive ndex of the last item in a larger list to return.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$UpdateLeafList(var.project, var.attribute.bulk.update, ancestor=var.ancestor, type=var.type, name=var.name, attribute=var.attribute, attribute.lt=var.attribute.lt, attribute.lte=var.attribute.lte, attribute.gt=var.attribute.gt, attribute.gte=var.attribute.gte, attribute.contains=var.attribute.contains, attribute.distance=var.attribute.distance, attribute.null=var.attribute.null, operation=var.operation, start=var.start, stop=var.stop)


####################  UpdateLeafType  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying an leaf type.
var.leaf.type.update <- {"description":"New description","name":"New name"} # LeafTypeUpdate | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$UpdateLeafType(var.id, var.leaf.type.update)


####################  UpdateLocalization  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a localization.
var.localization.update <- {"height":0.25,"width":0.25,"x":0.25,"y":0.25} # LocalizationUpdate | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$UpdateLocalization(var.id, var.localization.update)


####################  UpdateLocalizationList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.attribute.bulk.update <- {"attributes":{"Species":"Tuna"}} # AttributeBulkUpdate | 
var.media.query <- 'media.query_example' # character | Query string used to filter media IDs. If supplied, media_id will be ignored.
var.media.id <- [56] # array[integer] | Comma-separated list of media IDs.
var.type <- 56 # integer | Unique integer identifying a annotation type.
var.version <- [56] # array[integer] | List of integers representing versions to fetch
var.modified <- 1 # integer | Whether to return original or modified annotations, 0 or 1.
var.after <- 56 # integer | If given, all results returned will be after the localization with this ID. The `start` and `stop` parameters are relative to this modified range.
var.search <- '\"My search string\"' # character | Lucene query syntax string for use with Elasticsearch. See `reference <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
var.attribute <- 'attribute_example' # character | Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lt <- 'attribute.lt_example' # character | Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lte <- 'attribute.lte_example' # character | Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gt <- 'attribute.gt_example' # character | Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gte <- 'attribute.gte_example' # character | Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.contains <- 'attribute.contains_example' # character | Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.distance <- 'attribute.distance_example' # character | Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
var.attribute.null <- 'attribute.null_example' # character | Attribute null filter. Returns elements for which a given attribute is not defined.
var.operation <- 'operation_example' # character | Set to \"count\" to return a count of objects instead of the objects.
var.start <- 56 # integer | Pagination start index. Index of the first item in a larger list to return.
var.stop <- 56 # integer | Pagination start index. Non-inclusive ndex of the last item in a larger list to return.
var.exclude.parents <- 0 # integer | If a clone is present, do not send parent. (0 or 1)
var.frame <- 56 # integer | Frame number of this localization if it is in a video.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$UpdateLocalizationList(var.project, var.attribute.bulk.update, media.query=var.media.query, media.id=var.media.id, type=var.type, version=var.version, modified=var.modified, after=var.after, search=var.search, attribute=var.attribute, attribute.lt=var.attribute.lt, attribute.lte=var.attribute.lte, attribute.gt=var.attribute.gt, attribute.gte=var.attribute.gte, attribute.contains=var.attribute.contains, attribute.distance=var.attribute.distance, attribute.null=var.attribute.null, operation=var.operation, start=var.start, stop=var.stop, exclude.parents=var.exclude.parents, frame=var.frame)


####################  UpdateLocalizationType  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying an localization type.
var.localization.type.update <- {"description":"New description","name":"New name"} # LocalizationTypeUpdate | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$UpdateLocalizationType(var.id, var.localization.type.update)


####################  UpdateMedia  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a media.
var.media.update <- MediaUpdate$new() # MediaUpdate | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$UpdateMedia(var.id, var.media.update)


####################  UpdateMediaList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.attribute.bulk.update <- {"attributes":{"Species":"Tuna"}} # AttributeBulkUpdate | 
var.media.id <- [56] # array[integer] | List of integers identifying media.
var.type <- 56 # integer | Unique integer identifying media type.
var.name <- 'name_example' # character | Name of the media to filter on.
var.md5 <- 'md5_example' # character | MD5 sum of the media file.
var.after <- 'after_example' # character | If given, all results returned will be after the file with this filename. The `start` and `stop` parameters are relative to this modified range.
var.search <- '\"My search string\"' # character | Lucene query syntax string for use with Elasticsearch. See `reference <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
var.attribute <- 'attribute_example' # character | Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lt <- 'attribute.lt_example' # character | Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lte <- 'attribute.lte_example' # character | Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gt <- 'attribute.gt_example' # character | Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gte <- 'attribute.gte_example' # character | Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.contains <- 'attribute.contains_example' # character | Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.distance <- 'attribute.distance_example' # character | Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
var.attribute.null <- 'attribute.null_example' # character | Attribute null filter. Returns elements for which a given attribute is not defined.
var.operation <- 'operation_example' # character | Set to \"count\" to return a count of objects instead of the objects.
var.start <- 56 # integer | Pagination start index. Index of the first item in a larger list to return.
var.stop <- 56 # integer | Pagination start index. Non-inclusive ndex of the last item in a larger list to return.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$UpdateMediaList(var.project, var.attribute.bulk.update, media.id=var.media.id, type=var.type, name=var.name, md5=var.md5, after=var.after, search=var.search, attribute=var.attribute, attribute.lt=var.attribute.lt, attribute.lte=var.attribute.lte, attribute.gt=var.attribute.gt, attribute.gte=var.attribute.gte, attribute.contains=var.attribute.contains, attribute.distance=var.attribute.distance, attribute.null=var.attribute.null, operation=var.operation, start=var.start, stop=var.stop)


####################  UpdateMediaType  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying an media type.
var.media.type.update <- {"description":"New description","name":"New name"} # MediaTypeUpdate | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$UpdateMediaType(var.id, var.media.type.update)


####################  UpdateMembership  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a membership.
var.membership.update <- {"permission":"View Only"} # MembershipUpdate | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$UpdateMembership(var.id, var.membership.update)


####################  UpdateProject  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a project.
var.project.spec <- {"name":"New name","summary":"New summary"} # ProjectSpec | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$UpdateProject(var.id, var.project.spec)


####################  UpdateState  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a state.
var.state.update <- {"frame":1001} # StateUpdate | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$UpdateState(var.id, var.state.update)


####################  UpdateStateList  ####################

library(tator)
var.project <- 56 # integer | A unique integer identifying a project.
var.attribute.bulk.update <- {"attributes":{"Species":"Tuna"}} # AttributeBulkUpdate | 
var.media.query <- 'media.query_example' # character | Query string used to filter media IDs. If supplied, media_id will be ignored.
var.media.id <- [56] # array[integer] | Comma-separated list of media IDs.
var.type <- 56 # integer | Unique integer identifying a annotation type.
var.version <- [56] # array[integer] | List of integers representing versions to fetch
var.modified <- 1 # integer | Whether to return original or modified annotations, 0 or 1.
var.after <- 56 # integer | If given, all results returned will be after the localization with this ID. The `start` and `stop` parameters are relative to this modified range.
var.search <- '\"My search string\"' # character | Lucene query syntax string for use with Elasticsearch. See `reference <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
var.attribute <- 'attribute_example' # character | Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lt <- 'attribute.lt_example' # character | Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.lte <- 'attribute.lte_example' # character | Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gt <- 'attribute.gt_example' # character | Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.gte <- 'attribute.gte_example' # character | Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.contains <- 'attribute.contains_example' # character | Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
var.attribute.distance <- 'attribute.distance_example' # character | Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
var.attribute.null <- 'attribute.null_example' # character | Attribute null filter. Returns elements for which a given attribute is not defined.
var.operation <- 'operation_example' # character | Set to \"count\" to return a count of objects instead of the objects.
var.start <- 56 # integer | Pagination start index. Index of the first item in a larger list to return.
var.stop <- 56 # integer | Pagination start index. Non-inclusive ndex of the last item in a larger list to return.

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$UpdateStateList(var.project, var.attribute.bulk.update, media.query=var.media.query, media.id=var.media.id, type=var.type, version=var.version, modified=var.modified, after=var.after, search=var.search, attribute=var.attribute, attribute.lt=var.attribute.lt, attribute.lte=var.attribute.lte, attribute.gt=var.attribute.gt, attribute.gte=var.attribute.gte, attribute.contains=var.attribute.contains, attribute.distance=var.attribute.distance, attribute.null=var.attribute.null, operation=var.operation, start=var.start, stop=var.stop)


####################  UpdateStateType  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a state type.
var.state.type.update <- {"description":"New description","name":"New name"} # StateTypeUpdate | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$UpdateStateType(var.id, var.state.type.update)


####################  UpdateVersion  ####################

library(tator)
var.id <- 56 # integer | A unique integer identifying a version.
var.version.update <- {"bases":[1],"description":"New description","name":"New name","show_empty":true} # VersionUpdate | 

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$UpdateVersion(var.id, var.version.update)


####################  Whoami  ####################

library(tator)

api.instance <- TatorApi$new()

#Configure API key authorization: TokenAuth
api.instance$apiClient$apiKeys['Authorization'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$Whoami()


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{TatorApi$new()}}
\item \href{#method-AlgorithmLaunch}{\code{TatorApi$AlgorithmLaunch()}}
\item \href{#method-AlgorithmLaunchWithHttpInfo}{\code{TatorApi$AlgorithmLaunchWithHttpInfo()}}
\item \href{#method-CreateAnalysis}{\code{TatorApi$CreateAnalysis()}}
\item \href{#method-CreateAnalysisWithHttpInfo}{\code{TatorApi$CreateAnalysisWithHttpInfo()}}
\item \href{#method-CreateLeafList}{\code{TatorApi$CreateLeafList()}}
\item \href{#method-CreateLeafListWithHttpInfo}{\code{TatorApi$CreateLeafListWithHttpInfo()}}
\item \href{#method-CreateLeafType}{\code{TatorApi$CreateLeafType()}}
\item \href{#method-CreateLeafTypeWithHttpInfo}{\code{TatorApi$CreateLeafTypeWithHttpInfo()}}
\item \href{#method-CreateLocalizationList}{\code{TatorApi$CreateLocalizationList()}}
\item \href{#method-CreateLocalizationListWithHttpInfo}{\code{TatorApi$CreateLocalizationListWithHttpInfo()}}
\item \href{#method-CreateLocalizationType}{\code{TatorApi$CreateLocalizationType()}}
\item \href{#method-CreateLocalizationTypeWithHttpInfo}{\code{TatorApi$CreateLocalizationTypeWithHttpInfo()}}
\item \href{#method-CreateMedia}{\code{TatorApi$CreateMedia()}}
\item \href{#method-CreateMediaWithHttpInfo}{\code{TatorApi$CreateMediaWithHttpInfo()}}
\item \href{#method-CreateMediaType}{\code{TatorApi$CreateMediaType()}}
\item \href{#method-CreateMediaTypeWithHttpInfo}{\code{TatorApi$CreateMediaTypeWithHttpInfo()}}
\item \href{#method-CreateMembership}{\code{TatorApi$CreateMembership()}}
\item \href{#method-CreateMembershipWithHttpInfo}{\code{TatorApi$CreateMembershipWithHttpInfo()}}
\item \href{#method-CreateObtainAuthToken}{\code{TatorApi$CreateObtainAuthToken()}}
\item \href{#method-CreateObtainAuthTokenWithHttpInfo}{\code{TatorApi$CreateObtainAuthTokenWithHttpInfo()}}
\item \href{#method-CreateProgressSummaryAPI}{\code{TatorApi$CreateProgressSummaryAPI()}}
\item \href{#method-CreateProgressSummaryAPIWithHttpInfo}{\code{TatorApi$CreateProgressSummaryAPIWithHttpInfo()}}
\item \href{#method-CreateProject}{\code{TatorApi$CreateProject()}}
\item \href{#method-CreateProjectWithHttpInfo}{\code{TatorApi$CreateProjectWithHttpInfo()}}
\item \href{#method-CreateStateList}{\code{TatorApi$CreateStateList()}}
\item \href{#method-CreateStateListWithHttpInfo}{\code{TatorApi$CreateStateListWithHttpInfo()}}
\item \href{#method-CreateStateType}{\code{TatorApi$CreateStateType()}}
\item \href{#method-CreateStateTypeWithHttpInfo}{\code{TatorApi$CreateStateTypeWithHttpInfo()}}
\item \href{#method-CreateTemporaryFile}{\code{TatorApi$CreateTemporaryFile()}}
\item \href{#method-CreateTemporaryFileWithHttpInfo}{\code{TatorApi$CreateTemporaryFileWithHttpInfo()}}
\item \href{#method-CreateVersion}{\code{TatorApi$CreateVersion()}}
\item \href{#method-CreateVersionWithHttpInfo}{\code{TatorApi$CreateVersionWithHttpInfo()}}
\item \href{#method-DeleteAlgorithm}{\code{TatorApi$DeleteAlgorithm()}}
\item \href{#method-DeleteAlgorithmWithHttpInfo}{\code{TatorApi$DeleteAlgorithmWithHttpInfo()}}
\item \href{#method-DeleteJob}{\code{TatorApi$DeleteJob()}}
\item \href{#method-DeleteJobWithHttpInfo}{\code{TatorApi$DeleteJobWithHttpInfo()}}
\item \href{#method-DeleteJobGroup}{\code{TatorApi$DeleteJobGroup()}}
\item \href{#method-DeleteJobGroupWithHttpInfo}{\code{TatorApi$DeleteJobGroupWithHttpInfo()}}
\item \href{#method-DeleteLeaf}{\code{TatorApi$DeleteLeaf()}}
\item \href{#method-DeleteLeafWithHttpInfo}{\code{TatorApi$DeleteLeafWithHttpInfo()}}
\item \href{#method-DeleteLeafList}{\code{TatorApi$DeleteLeafList()}}
\item \href{#method-DeleteLeafListWithHttpInfo}{\code{TatorApi$DeleteLeafListWithHttpInfo()}}
\item \href{#method-DeleteLeafType}{\code{TatorApi$DeleteLeafType()}}
\item \href{#method-DeleteLeafTypeWithHttpInfo}{\code{TatorApi$DeleteLeafTypeWithHttpInfo()}}
\item \href{#method-DeleteLocalization}{\code{TatorApi$DeleteLocalization()}}
\item \href{#method-DeleteLocalizationWithHttpInfo}{\code{TatorApi$DeleteLocalizationWithHttpInfo()}}
\item \href{#method-DeleteLocalizationList}{\code{TatorApi$DeleteLocalizationList()}}
\item \href{#method-DeleteLocalizationListWithHttpInfo}{\code{TatorApi$DeleteLocalizationListWithHttpInfo()}}
\item \href{#method-DeleteLocalizationType}{\code{TatorApi$DeleteLocalizationType()}}
\item \href{#method-DeleteLocalizationTypeWithHttpInfo}{\code{TatorApi$DeleteLocalizationTypeWithHttpInfo()}}
\item \href{#method-DeleteMedia}{\code{TatorApi$DeleteMedia()}}
\item \href{#method-DeleteMediaWithHttpInfo}{\code{TatorApi$DeleteMediaWithHttpInfo()}}
\item \href{#method-DeleteMediaList}{\code{TatorApi$DeleteMediaList()}}
\item \href{#method-DeleteMediaListWithHttpInfo}{\code{TatorApi$DeleteMediaListWithHttpInfo()}}
\item \href{#method-DeleteMediaType}{\code{TatorApi$DeleteMediaType()}}
\item \href{#method-DeleteMediaTypeWithHttpInfo}{\code{TatorApi$DeleteMediaTypeWithHttpInfo()}}
\item \href{#method-DeleteMembership}{\code{TatorApi$DeleteMembership()}}
\item \href{#method-DeleteMembershipWithHttpInfo}{\code{TatorApi$DeleteMembershipWithHttpInfo()}}
\item \href{#method-DeleteProject}{\code{TatorApi$DeleteProject()}}
\item \href{#method-DeleteProjectWithHttpInfo}{\code{TatorApi$DeleteProjectWithHttpInfo()}}
\item \href{#method-DeleteState}{\code{TatorApi$DeleteState()}}
\item \href{#method-DeleteStateWithHttpInfo}{\code{TatorApi$DeleteStateWithHttpInfo()}}
\item \href{#method-DeleteStateList}{\code{TatorApi$DeleteStateList()}}
\item \href{#method-DeleteStateListWithHttpInfo}{\code{TatorApi$DeleteStateListWithHttpInfo()}}
\item \href{#method-DeleteStateType}{\code{TatorApi$DeleteStateType()}}
\item \href{#method-DeleteStateTypeWithHttpInfo}{\code{TatorApi$DeleteStateTypeWithHttpInfo()}}
\item \href{#method-DeleteTemporaryFile}{\code{TatorApi$DeleteTemporaryFile()}}
\item \href{#method-DeleteTemporaryFileWithHttpInfo}{\code{TatorApi$DeleteTemporaryFileWithHttpInfo()}}
\item \href{#method-DeleteTemporaryFileList}{\code{TatorApi$DeleteTemporaryFileList()}}
\item \href{#method-DeleteTemporaryFileListWithHttpInfo}{\code{TatorApi$DeleteTemporaryFileListWithHttpInfo()}}
\item \href{#method-DeleteVersion}{\code{TatorApi$DeleteVersion()}}
\item \href{#method-DeleteVersionWithHttpInfo}{\code{TatorApi$DeleteVersionWithHttpInfo()}}
\item \href{#method-GetAlgorithmList}{\code{TatorApi$GetAlgorithmList()}}
\item \href{#method-GetAlgorithmListWithHttpInfo}{\code{TatorApi$GetAlgorithmListWithHttpInfo()}}
\item \href{#method-GetAnalysisList}{\code{TatorApi$GetAnalysisList()}}
\item \href{#method-GetAnalysisListWithHttpInfo}{\code{TatorApi$GetAnalysisListWithHttpInfo()}}
\item \href{#method-GetClip}{\code{TatorApi$GetClip()}}
\item \href{#method-GetClipWithHttpInfo}{\code{TatorApi$GetClipWithHttpInfo()}}
\item \href{#method-GetFrame}{\code{TatorApi$GetFrame()}}
\item \href{#method-GetFrameWithHttpInfo}{\code{TatorApi$GetFrameWithHttpInfo()}}
\item \href{#method-GetLeaf}{\code{TatorApi$GetLeaf()}}
\item \href{#method-GetLeafWithHttpInfo}{\code{TatorApi$GetLeafWithHttpInfo()}}
\item \href{#method-GetLeafList}{\code{TatorApi$GetLeafList()}}
\item \href{#method-GetLeafListWithHttpInfo}{\code{TatorApi$GetLeafListWithHttpInfo()}}
\item \href{#method-GetLeafType}{\code{TatorApi$GetLeafType()}}
\item \href{#method-GetLeafTypeWithHttpInfo}{\code{TatorApi$GetLeafTypeWithHttpInfo()}}
\item \href{#method-GetLeafTypeList}{\code{TatorApi$GetLeafTypeList()}}
\item \href{#method-GetLeafTypeListWithHttpInfo}{\code{TatorApi$GetLeafTypeListWithHttpInfo()}}
\item \href{#method-GetLocalization}{\code{TatorApi$GetLocalization()}}
\item \href{#method-GetLocalizationWithHttpInfo}{\code{TatorApi$GetLocalizationWithHttpInfo()}}
\item \href{#method-GetLocalizationGraphic}{\code{TatorApi$GetLocalizationGraphic()}}
\item \href{#method-GetLocalizationGraphicWithHttpInfo}{\code{TatorApi$GetLocalizationGraphicWithHttpInfo()}}
\item \href{#method-GetLocalizationList}{\code{TatorApi$GetLocalizationList()}}
\item \href{#method-GetLocalizationListWithHttpInfo}{\code{TatorApi$GetLocalizationListWithHttpInfo()}}
\item \href{#method-GetLocalizationType}{\code{TatorApi$GetLocalizationType()}}
\item \href{#method-GetLocalizationTypeWithHttpInfo}{\code{TatorApi$GetLocalizationTypeWithHttpInfo()}}
\item \href{#method-GetLocalizationTypeList}{\code{TatorApi$GetLocalizationTypeList()}}
\item \href{#method-GetLocalizationTypeListWithHttpInfo}{\code{TatorApi$GetLocalizationTypeListWithHttpInfo()}}
\item \href{#method-GetMedia}{\code{TatorApi$GetMedia()}}
\item \href{#method-GetMediaWithHttpInfo}{\code{TatorApi$GetMediaWithHttpInfo()}}
\item \href{#method-GetMediaList}{\code{TatorApi$GetMediaList()}}
\item \href{#method-GetMediaListWithHttpInfo}{\code{TatorApi$GetMediaListWithHttpInfo()}}
\item \href{#method-GetMediaNext}{\code{TatorApi$GetMediaNext()}}
\item \href{#method-GetMediaNextWithHttpInfo}{\code{TatorApi$GetMediaNextWithHttpInfo()}}
\item \href{#method-GetMediaPrev}{\code{TatorApi$GetMediaPrev()}}
\item \href{#method-GetMediaPrevWithHttpInfo}{\code{TatorApi$GetMediaPrevWithHttpInfo()}}
\item \href{#method-GetMediaSections}{\code{TatorApi$GetMediaSections()}}
\item \href{#method-GetMediaSectionsWithHttpInfo}{\code{TatorApi$GetMediaSectionsWithHttpInfo()}}
\item \href{#method-GetMediaType}{\code{TatorApi$GetMediaType()}}
\item \href{#method-GetMediaTypeWithHttpInfo}{\code{TatorApi$GetMediaTypeWithHttpInfo()}}
\item \href{#method-GetMediaTypeList}{\code{TatorApi$GetMediaTypeList()}}
\item \href{#method-GetMediaTypeListWithHttpInfo}{\code{TatorApi$GetMediaTypeListWithHttpInfo()}}
\item \href{#method-GetMembership}{\code{TatorApi$GetMembership()}}
\item \href{#method-GetMembershipWithHttpInfo}{\code{TatorApi$GetMembershipWithHttpInfo()}}
\item \href{#method-GetMembershipList}{\code{TatorApi$GetMembershipList()}}
\item \href{#method-GetMembershipListWithHttpInfo}{\code{TatorApi$GetMembershipListWithHttpInfo()}}
\item \href{#method-GetProject}{\code{TatorApi$GetProject()}}
\item \href{#method-GetProjectWithHttpInfo}{\code{TatorApi$GetProjectWithHttpInfo()}}
\item \href{#method-GetProjectList}{\code{TatorApi$GetProjectList()}}
\item \href{#method-GetProjectListWithHttpInfo}{\code{TatorApi$GetProjectListWithHttpInfo()}}
\item \href{#method-GetSectionAnalysis}{\code{TatorApi$GetSectionAnalysis()}}
\item \href{#method-GetSectionAnalysisWithHttpInfo}{\code{TatorApi$GetSectionAnalysisWithHttpInfo()}}
\item \href{#method-GetState}{\code{TatorApi$GetState()}}
\item \href{#method-GetStateWithHttpInfo}{\code{TatorApi$GetStateWithHttpInfo()}}
\item \href{#method-GetStateGraphic}{\code{TatorApi$GetStateGraphic()}}
\item \href{#method-GetStateGraphicWithHttpInfo}{\code{TatorApi$GetStateGraphicWithHttpInfo()}}
\item \href{#method-GetStateList}{\code{TatorApi$GetStateList()}}
\item \href{#method-GetStateListWithHttpInfo}{\code{TatorApi$GetStateListWithHttpInfo()}}
\item \href{#method-GetStateType}{\code{TatorApi$GetStateType()}}
\item \href{#method-GetStateTypeWithHttpInfo}{\code{TatorApi$GetStateTypeWithHttpInfo()}}
\item \href{#method-GetStateTypeList}{\code{TatorApi$GetStateTypeList()}}
\item \href{#method-GetStateTypeListWithHttpInfo}{\code{TatorApi$GetStateTypeListWithHttpInfo()}}
\item \href{#method-GetTemporaryFile}{\code{TatorApi$GetTemporaryFile()}}
\item \href{#method-GetTemporaryFileWithHttpInfo}{\code{TatorApi$GetTemporaryFileWithHttpInfo()}}
\item \href{#method-GetTemporaryFileList}{\code{TatorApi$GetTemporaryFileList()}}
\item \href{#method-GetTemporaryFileListWithHttpInfo}{\code{TatorApi$GetTemporaryFileListWithHttpInfo()}}
\item \href{#method-GetVersion}{\code{TatorApi$GetVersion()}}
\item \href{#method-GetVersionWithHttpInfo}{\code{TatorApi$GetVersionWithHttpInfo()}}
\item \href{#method-GetVersionList}{\code{TatorApi$GetVersionList()}}
\item \href{#method-GetVersionListWithHttpInfo}{\code{TatorApi$GetVersionListWithHttpInfo()}}
\item \href{#method-LeafSuggestion}{\code{TatorApi$LeafSuggestion()}}
\item \href{#method-LeafSuggestionWithHttpInfo}{\code{TatorApi$LeafSuggestionWithHttpInfo()}}
\item \href{#method-MoveVideo}{\code{TatorApi$MoveVideo()}}
\item \href{#method-MoveVideoWithHttpInfo}{\code{TatorApi$MoveVideoWithHttpInfo()}}
\item \href{#method-Notify}{\code{TatorApi$Notify()}}
\item \href{#method-NotifyWithHttpInfo}{\code{TatorApi$NotifyWithHttpInfo()}}
\item \href{#method-Progress}{\code{TatorApi$Progress()}}
\item \href{#method-ProgressWithHttpInfo}{\code{TatorApi$ProgressWithHttpInfo()}}
\item \href{#method-RegisterAlgorithm}{\code{TatorApi$RegisterAlgorithm()}}
\item \href{#method-RegisterAlgorithmWithHttpInfo}{\code{TatorApi$RegisterAlgorithmWithHttpInfo()}}
\item \href{#method-SaveAlgorithmManifest}{\code{TatorApi$SaveAlgorithmManifest()}}
\item \href{#method-SaveAlgorithmManifestWithHttpInfo}{\code{TatorApi$SaveAlgorithmManifestWithHttpInfo()}}
\item \href{#method-Transcode}{\code{TatorApi$Transcode()}}
\item \href{#method-TranscodeWithHttpInfo}{\code{TatorApi$TranscodeWithHttpInfo()}}
\item \href{#method-UpdateLeaf}{\code{TatorApi$UpdateLeaf()}}
\item \href{#method-UpdateLeafWithHttpInfo}{\code{TatorApi$UpdateLeafWithHttpInfo()}}
\item \href{#method-UpdateLeafList}{\code{TatorApi$UpdateLeafList()}}
\item \href{#method-UpdateLeafListWithHttpInfo}{\code{TatorApi$UpdateLeafListWithHttpInfo()}}
\item \href{#method-UpdateLeafType}{\code{TatorApi$UpdateLeafType()}}
\item \href{#method-UpdateLeafTypeWithHttpInfo}{\code{TatorApi$UpdateLeafTypeWithHttpInfo()}}
\item \href{#method-UpdateLocalization}{\code{TatorApi$UpdateLocalization()}}
\item \href{#method-UpdateLocalizationWithHttpInfo}{\code{TatorApi$UpdateLocalizationWithHttpInfo()}}
\item \href{#method-UpdateLocalizationList}{\code{TatorApi$UpdateLocalizationList()}}
\item \href{#method-UpdateLocalizationListWithHttpInfo}{\code{TatorApi$UpdateLocalizationListWithHttpInfo()}}
\item \href{#method-UpdateLocalizationType}{\code{TatorApi$UpdateLocalizationType()}}
\item \href{#method-UpdateLocalizationTypeWithHttpInfo}{\code{TatorApi$UpdateLocalizationTypeWithHttpInfo()}}
\item \href{#method-UpdateMedia}{\code{TatorApi$UpdateMedia()}}
\item \href{#method-UpdateMediaWithHttpInfo}{\code{TatorApi$UpdateMediaWithHttpInfo()}}
\item \href{#method-UpdateMediaList}{\code{TatorApi$UpdateMediaList()}}
\item \href{#method-UpdateMediaListWithHttpInfo}{\code{TatorApi$UpdateMediaListWithHttpInfo()}}
\item \href{#method-UpdateMediaType}{\code{TatorApi$UpdateMediaType()}}
\item \href{#method-UpdateMediaTypeWithHttpInfo}{\code{TatorApi$UpdateMediaTypeWithHttpInfo()}}
\item \href{#method-UpdateMembership}{\code{TatorApi$UpdateMembership()}}
\item \href{#method-UpdateMembershipWithHttpInfo}{\code{TatorApi$UpdateMembershipWithHttpInfo()}}
\item \href{#method-UpdateProject}{\code{TatorApi$UpdateProject()}}
\item \href{#method-UpdateProjectWithHttpInfo}{\code{TatorApi$UpdateProjectWithHttpInfo()}}
\item \href{#method-UpdateState}{\code{TatorApi$UpdateState()}}
\item \href{#method-UpdateStateWithHttpInfo}{\code{TatorApi$UpdateStateWithHttpInfo()}}
\item \href{#method-UpdateStateList}{\code{TatorApi$UpdateStateList()}}
\item \href{#method-UpdateStateListWithHttpInfo}{\code{TatorApi$UpdateStateListWithHttpInfo()}}
\item \href{#method-UpdateStateType}{\code{TatorApi$UpdateStateType()}}
\item \href{#method-UpdateStateTypeWithHttpInfo}{\code{TatorApi$UpdateStateTypeWithHttpInfo()}}
\item \href{#method-UpdateVersion}{\code{TatorApi$UpdateVersion()}}
\item \href{#method-UpdateVersionWithHttpInfo}{\code{TatorApi$UpdateVersionWithHttpInfo()}}
\item \href{#method-Whoami}{\code{TatorApi$Whoami()}}
\item \href{#method-WhoamiWithHttpInfo}{\code{TatorApi$WhoamiWithHttpInfo()}}
\item \href{#method-clone}{\code{TatorApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$new(apiClient)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AlgorithmLaunch"></a>}}
\if{latex}{\out{\hypertarget{method-AlgorithmLaunch}{}}}
\subsection{Method \code{AlgorithmLaunch()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$AlgorithmLaunch(project, algorithm.launch.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AlgorithmLaunchWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-AlgorithmLaunchWithHttpInfo}{}}}
\subsection{Method \code{AlgorithmLaunchWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$AlgorithmLaunchWithHttpInfo(project, algorithm.launch.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateAnalysis"></a>}}
\if{latex}{\out{\hypertarget{method-CreateAnalysis}{}}}
\subsection{Method \code{CreateAnalysis()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateAnalysis(project, analysis.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateAnalysisWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CreateAnalysisWithHttpInfo}{}}}
\subsection{Method \code{CreateAnalysisWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateAnalysisWithHttpInfo(project, analysis.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateLeafList"></a>}}
\if{latex}{\out{\hypertarget{method-CreateLeafList}{}}}
\subsection{Method \code{CreateLeafList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateLeafList(project, leaf.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateLeafListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CreateLeafListWithHttpInfo}{}}}
\subsection{Method \code{CreateLeafListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateLeafListWithHttpInfo(project, leaf.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateLeafType"></a>}}
\if{latex}{\out{\hypertarget{method-CreateLeafType}{}}}
\subsection{Method \code{CreateLeafType()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateLeafType(project, leaf.type.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateLeafTypeWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CreateLeafTypeWithHttpInfo}{}}}
\subsection{Method \code{CreateLeafTypeWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateLeafTypeWithHttpInfo(project, leaf.type.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateLocalizationList"></a>}}
\if{latex}{\out{\hypertarget{method-CreateLocalizationList}{}}}
\subsection{Method \code{CreateLocalizationList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateLocalizationList(project, localization.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateLocalizationListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CreateLocalizationListWithHttpInfo}{}}}
\subsection{Method \code{CreateLocalizationListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateLocalizationListWithHttpInfo(project, localization.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateLocalizationType"></a>}}
\if{latex}{\out{\hypertarget{method-CreateLocalizationType}{}}}
\subsection{Method \code{CreateLocalizationType()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateLocalizationType(project, localization.type.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateLocalizationTypeWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CreateLocalizationTypeWithHttpInfo}{}}}
\subsection{Method \code{CreateLocalizationTypeWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateLocalizationTypeWithHttpInfo(
  project,
  localization.type.spec,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateMedia"></a>}}
\if{latex}{\out{\hypertarget{method-CreateMedia}{}}}
\subsection{Method \code{CreateMedia()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateMedia(project, media.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateMediaWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CreateMediaWithHttpInfo}{}}}
\subsection{Method \code{CreateMediaWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateMediaWithHttpInfo(project, media.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateMediaType"></a>}}
\if{latex}{\out{\hypertarget{method-CreateMediaType}{}}}
\subsection{Method \code{CreateMediaType()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateMediaType(project, media.type.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateMediaTypeWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CreateMediaTypeWithHttpInfo}{}}}
\subsection{Method \code{CreateMediaTypeWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateMediaTypeWithHttpInfo(project, media.type.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateMembership"></a>}}
\if{latex}{\out{\hypertarget{method-CreateMembership}{}}}
\subsection{Method \code{CreateMembership()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateMembership(project, membership.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateMembershipWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CreateMembershipWithHttpInfo}{}}}
\subsection{Method \code{CreateMembershipWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateMembershipWithHttpInfo(project, membership.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateObtainAuthToken"></a>}}
\if{latex}{\out{\hypertarget{method-CreateObtainAuthToken}{}}}
\subsection{Method \code{CreateObtainAuthToken()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateObtainAuthToken(credentials = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateObtainAuthTokenWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CreateObtainAuthTokenWithHttpInfo}{}}}
\subsection{Method \code{CreateObtainAuthTokenWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateObtainAuthTokenWithHttpInfo(credentials = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateProgressSummaryAPI"></a>}}
\if{latex}{\out{\hypertarget{method-CreateProgressSummaryAPI}{}}}
\subsection{Method \code{CreateProgressSummaryAPI()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateProgressSummaryAPI(project, progress.summary.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateProgressSummaryAPIWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CreateProgressSummaryAPIWithHttpInfo}{}}}
\subsection{Method \code{CreateProgressSummaryAPIWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateProgressSummaryAPIWithHttpInfo(
  project,
  progress.summary.spec,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateProject"></a>}}
\if{latex}{\out{\hypertarget{method-CreateProject}{}}}
\subsection{Method \code{CreateProject()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateProject(project.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateProjectWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CreateProjectWithHttpInfo}{}}}
\subsection{Method \code{CreateProjectWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateProjectWithHttpInfo(project.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateStateList"></a>}}
\if{latex}{\out{\hypertarget{method-CreateStateList}{}}}
\subsection{Method \code{CreateStateList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateStateList(project, state.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateStateListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CreateStateListWithHttpInfo}{}}}
\subsection{Method \code{CreateStateListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateStateListWithHttpInfo(project, state.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateStateType"></a>}}
\if{latex}{\out{\hypertarget{method-CreateStateType}{}}}
\subsection{Method \code{CreateStateType()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateStateType(project, state.type.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateStateTypeWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CreateStateTypeWithHttpInfo}{}}}
\subsection{Method \code{CreateStateTypeWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateStateTypeWithHttpInfo(project, state.type.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateTemporaryFile"></a>}}
\if{latex}{\out{\hypertarget{method-CreateTemporaryFile}{}}}
\subsection{Method \code{CreateTemporaryFile()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateTemporaryFile(project, temporary.file.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateTemporaryFileWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CreateTemporaryFileWithHttpInfo}{}}}
\subsection{Method \code{CreateTemporaryFileWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateTemporaryFileWithHttpInfo(project, temporary.file.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateVersion"></a>}}
\if{latex}{\out{\hypertarget{method-CreateVersion}{}}}
\subsection{Method \code{CreateVersion()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateVersion(project, version.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateVersionWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CreateVersionWithHttpInfo}{}}}
\subsection{Method \code{CreateVersionWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$CreateVersionWithHttpInfo(project, version.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteAlgorithm"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteAlgorithm}{}}}
\subsection{Method \code{DeleteAlgorithm()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteAlgorithm(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteAlgorithmWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteAlgorithmWithHttpInfo}{}}}
\subsection{Method \code{DeleteAlgorithmWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteAlgorithmWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteJob"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteJob}{}}}
\subsection{Method \code{DeleteJob()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteJob(run.uid, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteJobWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteJobWithHttpInfo}{}}}
\subsection{Method \code{DeleteJobWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteJobWithHttpInfo(run.uid, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteJobGroup"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteJobGroup}{}}}
\subsection{Method \code{DeleteJobGroup()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteJobGroup(group.id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteJobGroupWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteJobGroupWithHttpInfo}{}}}
\subsection{Method \code{DeleteJobGroupWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteJobGroupWithHttpInfo(group.id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteLeaf"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteLeaf}{}}}
\subsection{Method \code{DeleteLeaf()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteLeaf(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteLeafWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteLeafWithHttpInfo}{}}}
\subsection{Method \code{DeleteLeafWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteLeafWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteLeafList"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteLeafList}{}}}
\subsection{Method \code{DeleteLeafList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteLeafList(
  project,
  ancestor = NULL,
  type = NULL,
  name = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteLeafListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteLeafListWithHttpInfo}{}}}
\subsection{Method \code{DeleteLeafListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteLeafListWithHttpInfo(
  project,
  ancestor = NULL,
  type = NULL,
  name = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteLeafType"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteLeafType}{}}}
\subsection{Method \code{DeleteLeafType()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteLeafType(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteLeafTypeWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteLeafTypeWithHttpInfo}{}}}
\subsection{Method \code{DeleteLeafTypeWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteLeafTypeWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteLocalization"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteLocalization}{}}}
\subsection{Method \code{DeleteLocalization()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteLocalization(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteLocalizationWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteLocalizationWithHttpInfo}{}}}
\subsection{Method \code{DeleteLocalizationWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteLocalizationWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteLocalizationList"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteLocalizationList}{}}}
\subsection{Method \code{DeleteLocalizationList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteLocalizationList(
  project,
  media.query = NULL,
  media.id = NULL,
  type = NULL,
  version = NULL,
  modified = 1,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  exclude.parents = 0,
  frame = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteLocalizationListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteLocalizationListWithHttpInfo}{}}}
\subsection{Method \code{DeleteLocalizationListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteLocalizationListWithHttpInfo(
  project,
  media.query = NULL,
  media.id = NULL,
  type = NULL,
  version = NULL,
  modified = 1,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  exclude.parents = 0,
  frame = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteLocalizationType"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteLocalizationType}{}}}
\subsection{Method \code{DeleteLocalizationType()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteLocalizationType(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteLocalizationTypeWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteLocalizationTypeWithHttpInfo}{}}}
\subsection{Method \code{DeleteLocalizationTypeWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteLocalizationTypeWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteMedia"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteMedia}{}}}
\subsection{Method \code{DeleteMedia()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteMedia(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteMediaWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteMediaWithHttpInfo}{}}}
\subsection{Method \code{DeleteMediaWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteMediaWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteMediaList"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteMediaList}{}}}
\subsection{Method \code{DeleteMediaList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteMediaList(
  project,
  media.id = NULL,
  type = NULL,
  name = NULL,
  md5 = NULL,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteMediaListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteMediaListWithHttpInfo}{}}}
\subsection{Method \code{DeleteMediaListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteMediaListWithHttpInfo(
  project,
  media.id = NULL,
  type = NULL,
  name = NULL,
  md5 = NULL,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteMediaType"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteMediaType}{}}}
\subsection{Method \code{DeleteMediaType()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteMediaType(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteMediaTypeWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteMediaTypeWithHttpInfo}{}}}
\subsection{Method \code{DeleteMediaTypeWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteMediaTypeWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteMembership"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteMembership}{}}}
\subsection{Method \code{DeleteMembership()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteMembership(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteMembershipWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteMembershipWithHttpInfo}{}}}
\subsection{Method \code{DeleteMembershipWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteMembershipWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteProject"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteProject}{}}}
\subsection{Method \code{DeleteProject()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteProject(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteProjectWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteProjectWithHttpInfo}{}}}
\subsection{Method \code{DeleteProjectWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteProjectWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteState"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteState}{}}}
\subsection{Method \code{DeleteState()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteState(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteStateWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteStateWithHttpInfo}{}}}
\subsection{Method \code{DeleteStateWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteStateWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteStateList"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteStateList}{}}}
\subsection{Method \code{DeleteStateList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteStateList(
  project,
  media.query = NULL,
  media.id = NULL,
  type = NULL,
  version = NULL,
  modified = 1,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteStateListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteStateListWithHttpInfo}{}}}
\subsection{Method \code{DeleteStateListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteStateListWithHttpInfo(
  project,
  media.query = NULL,
  media.id = NULL,
  type = NULL,
  version = NULL,
  modified = 1,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteStateType"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteStateType}{}}}
\subsection{Method \code{DeleteStateType()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteStateType(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteStateTypeWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteStateTypeWithHttpInfo}{}}}
\subsection{Method \code{DeleteStateTypeWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteStateTypeWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteTemporaryFile"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteTemporaryFile}{}}}
\subsection{Method \code{DeleteTemporaryFile()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteTemporaryFile(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteTemporaryFileWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteTemporaryFileWithHttpInfo}{}}}
\subsection{Method \code{DeleteTemporaryFileWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteTemporaryFileWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteTemporaryFileList"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteTemporaryFileList}{}}}
\subsection{Method \code{DeleteTemporaryFileList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteTemporaryFileList(project, expired = 0, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteTemporaryFileListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteTemporaryFileListWithHttpInfo}{}}}
\subsection{Method \code{DeleteTemporaryFileListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteTemporaryFileListWithHttpInfo(project, expired = 0, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteVersion"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteVersion}{}}}
\subsection{Method \code{DeleteVersion()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteVersion(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteVersionWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteVersionWithHttpInfo}{}}}
\subsection{Method \code{DeleteVersionWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$DeleteVersionWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetAlgorithmList"></a>}}
\if{latex}{\out{\hypertarget{method-GetAlgorithmList}{}}}
\subsection{Method \code{GetAlgorithmList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetAlgorithmList(project, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetAlgorithmListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetAlgorithmListWithHttpInfo}{}}}
\subsection{Method \code{GetAlgorithmListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetAlgorithmListWithHttpInfo(project, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetAnalysisList"></a>}}
\if{latex}{\out{\hypertarget{method-GetAnalysisList}{}}}
\subsection{Method \code{GetAnalysisList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetAnalysisList(project, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetAnalysisListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetAnalysisListWithHttpInfo}{}}}
\subsection{Method \code{GetAnalysisListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetAnalysisListWithHttpInfo(project, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetClip"></a>}}
\if{latex}{\out{\hypertarget{method-GetClip}{}}}
\subsection{Method \code{GetClip()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetClip(id, frame.ranges, quality = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetClipWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetClipWithHttpInfo}{}}}
\subsection{Method \code{GetClipWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetClipWithHttpInfo(id, frame.ranges, quality = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetFrame"></a>}}
\if{latex}{\out{\hypertarget{method-GetFrame}{}}}
\subsection{Method \code{GetFrame()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetFrame(
  id,
  frames = list(),
  tile = NULL,
  roi = NULL,
  animate = NULL,
  quality = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetFrameWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetFrameWithHttpInfo}{}}}
\subsection{Method \code{GetFrameWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetFrameWithHttpInfo(
  id,
  frames = list(),
  tile = NULL,
  roi = NULL,
  animate = NULL,
  quality = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetLeaf"></a>}}
\if{latex}{\out{\hypertarget{method-GetLeaf}{}}}
\subsection{Method \code{GetLeaf()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetLeaf(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetLeafWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetLeafWithHttpInfo}{}}}
\subsection{Method \code{GetLeafWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetLeafWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetLeafList"></a>}}
\if{latex}{\out{\hypertarget{method-GetLeafList}{}}}
\subsection{Method \code{GetLeafList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetLeafList(
  project,
  ancestor = NULL,
  type = NULL,
  name = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetLeafListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetLeafListWithHttpInfo}{}}}
\subsection{Method \code{GetLeafListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetLeafListWithHttpInfo(
  project,
  ancestor = NULL,
  type = NULL,
  name = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetLeafType"></a>}}
\if{latex}{\out{\hypertarget{method-GetLeafType}{}}}
\subsection{Method \code{GetLeafType()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetLeafType(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetLeafTypeWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetLeafTypeWithHttpInfo}{}}}
\subsection{Method \code{GetLeafTypeWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetLeafTypeWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetLeafTypeList"></a>}}
\if{latex}{\out{\hypertarget{method-GetLeafTypeList}{}}}
\subsection{Method \code{GetLeafTypeList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetLeafTypeList(project, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetLeafTypeListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetLeafTypeListWithHttpInfo}{}}}
\subsection{Method \code{GetLeafTypeListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetLeafTypeListWithHttpInfo(project, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetLocalization"></a>}}
\if{latex}{\out{\hypertarget{method-GetLocalization}{}}}
\subsection{Method \code{GetLocalization()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetLocalization(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetLocalizationWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetLocalizationWithHttpInfo}{}}}
\subsection{Method \code{GetLocalizationWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetLocalizationWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetLocalizationGraphic"></a>}}
\if{latex}{\out{\hypertarget{method-GetLocalizationGraphic}{}}}
\subsection{Method \code{GetLocalizationGraphic()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetLocalizationGraphic(
  id,
  force.scale = NULL,
  use.default.margins = TRUE,
  margin.x = NULL,
  margin.y = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetLocalizationGraphicWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetLocalizationGraphicWithHttpInfo}{}}}
\subsection{Method \code{GetLocalizationGraphicWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetLocalizationGraphicWithHttpInfo(
  id,
  force.scale = NULL,
  use.default.margins = TRUE,
  margin.x = NULL,
  margin.y = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetLocalizationList"></a>}}
\if{latex}{\out{\hypertarget{method-GetLocalizationList}{}}}
\subsection{Method \code{GetLocalizationList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetLocalizationList(
  project,
  media.query = NULL,
  media.id = NULL,
  type = NULL,
  version = NULL,
  modified = 1,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  exclude.parents = 0,
  frame = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetLocalizationListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetLocalizationListWithHttpInfo}{}}}
\subsection{Method \code{GetLocalizationListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetLocalizationListWithHttpInfo(
  project,
  media.query = NULL,
  media.id = NULL,
  type = NULL,
  version = NULL,
  modified = 1,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  exclude.parents = 0,
  frame = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetLocalizationType"></a>}}
\if{latex}{\out{\hypertarget{method-GetLocalizationType}{}}}
\subsection{Method \code{GetLocalizationType()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetLocalizationType(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetLocalizationTypeWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetLocalizationTypeWithHttpInfo}{}}}
\subsection{Method \code{GetLocalizationTypeWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetLocalizationTypeWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetLocalizationTypeList"></a>}}
\if{latex}{\out{\hypertarget{method-GetLocalizationTypeList}{}}}
\subsection{Method \code{GetLocalizationTypeList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetLocalizationTypeList(project, media.id = NULL, type = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetLocalizationTypeListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetLocalizationTypeListWithHttpInfo}{}}}
\subsection{Method \code{GetLocalizationTypeListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetLocalizationTypeListWithHttpInfo(
  project,
  media.id = NULL,
  type = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetMedia"></a>}}
\if{latex}{\out{\hypertarget{method-GetMedia}{}}}
\subsection{Method \code{GetMedia()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetMedia(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetMediaWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetMediaWithHttpInfo}{}}}
\subsection{Method \code{GetMediaWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetMediaWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetMediaList"></a>}}
\if{latex}{\out{\hypertarget{method-GetMediaList}{}}}
\subsection{Method \code{GetMediaList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetMediaList(
  project,
  media.id = NULL,
  type = NULL,
  name = NULL,
  md5 = NULL,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetMediaListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetMediaListWithHttpInfo}{}}}
\subsection{Method \code{GetMediaListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetMediaListWithHttpInfo(
  project,
  media.id = NULL,
  type = NULL,
  name = NULL,
  md5 = NULL,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetMediaNext"></a>}}
\if{latex}{\out{\hypertarget{method-GetMediaNext}{}}}
\subsection{Method \code{GetMediaNext()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetMediaNext(
  id,
  media.id = NULL,
  type = NULL,
  name = NULL,
  md5 = NULL,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetMediaNextWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetMediaNextWithHttpInfo}{}}}
\subsection{Method \code{GetMediaNextWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetMediaNextWithHttpInfo(
  id,
  media.id = NULL,
  type = NULL,
  name = NULL,
  md5 = NULL,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetMediaPrev"></a>}}
\if{latex}{\out{\hypertarget{method-GetMediaPrev}{}}}
\subsection{Method \code{GetMediaPrev()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetMediaPrev(
  id,
  media.id = NULL,
  type = NULL,
  name = NULL,
  md5 = NULL,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetMediaPrevWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetMediaPrevWithHttpInfo}{}}}
\subsection{Method \code{GetMediaPrevWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetMediaPrevWithHttpInfo(
  id,
  media.id = NULL,
  type = NULL,
  name = NULL,
  md5 = NULL,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetMediaSections"></a>}}
\if{latex}{\out{\hypertarget{method-GetMediaSections}{}}}
\subsection{Method \code{GetMediaSections()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetMediaSections(
  project,
  media.id = NULL,
  type = NULL,
  name = NULL,
  md5 = NULL,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetMediaSectionsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetMediaSectionsWithHttpInfo}{}}}
\subsection{Method \code{GetMediaSectionsWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetMediaSectionsWithHttpInfo(
  project,
  media.id = NULL,
  type = NULL,
  name = NULL,
  md5 = NULL,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetMediaType"></a>}}
\if{latex}{\out{\hypertarget{method-GetMediaType}{}}}
\subsection{Method \code{GetMediaType()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetMediaType(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetMediaTypeWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetMediaTypeWithHttpInfo}{}}}
\subsection{Method \code{GetMediaTypeWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetMediaTypeWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetMediaTypeList"></a>}}
\if{latex}{\out{\hypertarget{method-GetMediaTypeList}{}}}
\subsection{Method \code{GetMediaTypeList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetMediaTypeList(project, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetMediaTypeListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetMediaTypeListWithHttpInfo}{}}}
\subsection{Method \code{GetMediaTypeListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetMediaTypeListWithHttpInfo(project, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetMembership"></a>}}
\if{latex}{\out{\hypertarget{method-GetMembership}{}}}
\subsection{Method \code{GetMembership()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetMembership(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetMembershipWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetMembershipWithHttpInfo}{}}}
\subsection{Method \code{GetMembershipWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetMembershipWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetMembershipList"></a>}}
\if{latex}{\out{\hypertarget{method-GetMembershipList}{}}}
\subsection{Method \code{GetMembershipList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetMembershipList(project, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetMembershipListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetMembershipListWithHttpInfo}{}}}
\subsection{Method \code{GetMembershipListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetMembershipListWithHttpInfo(project, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetProject"></a>}}
\if{latex}{\out{\hypertarget{method-GetProject}{}}}
\subsection{Method \code{GetProject()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetProject(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetProjectWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetProjectWithHttpInfo}{}}}
\subsection{Method \code{GetProjectWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetProjectWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetProjectList"></a>}}
\if{latex}{\out{\hypertarget{method-GetProjectList}{}}}
\subsection{Method \code{GetProjectList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetProjectList(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetProjectListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetProjectListWithHttpInfo}{}}}
\subsection{Method \code{GetProjectListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetProjectListWithHttpInfo(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetSectionAnalysis"></a>}}
\if{latex}{\out{\hypertarget{method-GetSectionAnalysis}{}}}
\subsection{Method \code{GetSectionAnalysis()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetSectionAnalysis(
  project,
  media.id = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetSectionAnalysisWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetSectionAnalysisWithHttpInfo}{}}}
\subsection{Method \code{GetSectionAnalysisWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetSectionAnalysisWithHttpInfo(
  project,
  media.id = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetState"></a>}}
\if{latex}{\out{\hypertarget{method-GetState}{}}}
\subsection{Method \code{GetState()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetState(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetStateWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetStateWithHttpInfo}{}}}
\subsection{Method \code{GetStateWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetStateWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetStateGraphic"></a>}}
\if{latex}{\out{\hypertarget{method-GetStateGraphic}{}}}
\subsection{Method \code{GetStateGraphic()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetStateGraphic(
  id,
  mode = "animate",
  fps = 2,
  force.scale = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetStateGraphicWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetStateGraphicWithHttpInfo}{}}}
\subsection{Method \code{GetStateGraphicWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetStateGraphicWithHttpInfo(
  id,
  mode = "animate",
  fps = 2,
  force.scale = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetStateList"></a>}}
\if{latex}{\out{\hypertarget{method-GetStateList}{}}}
\subsection{Method \code{GetStateList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetStateList(
  project,
  media.query = NULL,
  media.id = NULL,
  type = NULL,
  version = NULL,
  modified = 1,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetStateListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetStateListWithHttpInfo}{}}}
\subsection{Method \code{GetStateListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetStateListWithHttpInfo(
  project,
  media.query = NULL,
  media.id = NULL,
  type = NULL,
  version = NULL,
  modified = 1,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetStateType"></a>}}
\if{latex}{\out{\hypertarget{method-GetStateType}{}}}
\subsection{Method \code{GetStateType()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetStateType(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetStateTypeWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetStateTypeWithHttpInfo}{}}}
\subsection{Method \code{GetStateTypeWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetStateTypeWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetStateTypeList"></a>}}
\if{latex}{\out{\hypertarget{method-GetStateTypeList}{}}}
\subsection{Method \code{GetStateTypeList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetStateTypeList(project, media.id = NULL, type = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetStateTypeListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetStateTypeListWithHttpInfo}{}}}
\subsection{Method \code{GetStateTypeListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetStateTypeListWithHttpInfo(
  project,
  media.id = NULL,
  type = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetTemporaryFile"></a>}}
\if{latex}{\out{\hypertarget{method-GetTemporaryFile}{}}}
\subsection{Method \code{GetTemporaryFile()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetTemporaryFile(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetTemporaryFileWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetTemporaryFileWithHttpInfo}{}}}
\subsection{Method \code{GetTemporaryFileWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetTemporaryFileWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetTemporaryFileList"></a>}}
\if{latex}{\out{\hypertarget{method-GetTemporaryFileList}{}}}
\subsection{Method \code{GetTemporaryFileList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetTemporaryFileList(project, expired = 0, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetTemporaryFileListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetTemporaryFileListWithHttpInfo}{}}}
\subsection{Method \code{GetTemporaryFileListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetTemporaryFileListWithHttpInfo(project, expired = 0, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetVersion"></a>}}
\if{latex}{\out{\hypertarget{method-GetVersion}{}}}
\subsection{Method \code{GetVersion()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetVersion(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetVersionWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetVersionWithHttpInfo}{}}}
\subsection{Method \code{GetVersionWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetVersionWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetVersionList"></a>}}
\if{latex}{\out{\hypertarget{method-GetVersionList}{}}}
\subsection{Method \code{GetVersionList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetVersionList(project, media.id = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetVersionListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetVersionListWithHttpInfo}{}}}
\subsection{Method \code{GetVersionListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$GetVersionListWithHttpInfo(project, media.id = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LeafSuggestion"></a>}}
\if{latex}{\out{\hypertarget{method-LeafSuggestion}{}}}
\subsection{Method \code{LeafSuggestion()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$LeafSuggestion(project, ancestor, query, min.level = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LeafSuggestionWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-LeafSuggestionWithHttpInfo}{}}}
\subsection{Method \code{LeafSuggestionWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$LeafSuggestionWithHttpInfo(
  project,
  ancestor,
  query,
  min.level = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MoveVideo"></a>}}
\if{latex}{\out{\hypertarget{method-MoveVideo}{}}}
\subsection{Method \code{MoveVideo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$MoveVideo(id, move.video.spec = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MoveVideoWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-MoveVideoWithHttpInfo}{}}}
\subsection{Method \code{MoveVideoWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$MoveVideoWithHttpInfo(id, move.video.spec = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Notify"></a>}}
\if{latex}{\out{\hypertarget{method-Notify}{}}}
\subsection{Method \code{Notify()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$Notify(notify.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotifyWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-NotifyWithHttpInfo}{}}}
\subsection{Method \code{NotifyWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$NotifyWithHttpInfo(notify.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Progress"></a>}}
\if{latex}{\out{\hypertarget{method-Progress}{}}}
\subsection{Method \code{Progress()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$Progress(project, progress.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProgressWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ProgressWithHttpInfo}{}}}
\subsection{Method \code{ProgressWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$ProgressWithHttpInfo(project, progress.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RegisterAlgorithm"></a>}}
\if{latex}{\out{\hypertarget{method-RegisterAlgorithm}{}}}
\subsection{Method \code{RegisterAlgorithm()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$RegisterAlgorithm(project, algorithm.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RegisterAlgorithmWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-RegisterAlgorithmWithHttpInfo}{}}}
\subsection{Method \code{RegisterAlgorithmWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$RegisterAlgorithmWithHttpInfo(project, algorithm.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SaveAlgorithmManifest"></a>}}
\if{latex}{\out{\hypertarget{method-SaveAlgorithmManifest}{}}}
\subsection{Method \code{SaveAlgorithmManifest()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$SaveAlgorithmManifest(project, algorithm.manifest.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SaveAlgorithmManifestWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-SaveAlgorithmManifestWithHttpInfo}{}}}
\subsection{Method \code{SaveAlgorithmManifestWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$SaveAlgorithmManifestWithHttpInfo(
  project,
  algorithm.manifest.spec,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Transcode"></a>}}
\if{latex}{\out{\hypertarget{method-Transcode}{}}}
\subsection{Method \code{Transcode()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$Transcode(project, transcode.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TranscodeWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TranscodeWithHttpInfo}{}}}
\subsection{Method \code{TranscodeWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$TranscodeWithHttpInfo(project, transcode.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateLeaf"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateLeaf}{}}}
\subsection{Method \code{UpdateLeaf()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateLeaf(id, leaf.update, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateLeafWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateLeafWithHttpInfo}{}}}
\subsection{Method \code{UpdateLeafWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateLeafWithHttpInfo(id, leaf.update, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateLeafList"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateLeafList}{}}}
\subsection{Method \code{UpdateLeafList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateLeafList(
  project,
  attribute.bulk.update,
  ancestor = NULL,
  type = NULL,
  name = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateLeafListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateLeafListWithHttpInfo}{}}}
\subsection{Method \code{UpdateLeafListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateLeafListWithHttpInfo(
  project,
  attribute.bulk.update,
  ancestor = NULL,
  type = NULL,
  name = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateLeafType"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateLeafType}{}}}
\subsection{Method \code{UpdateLeafType()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateLeafType(id, leaf.type.update, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateLeafTypeWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateLeafTypeWithHttpInfo}{}}}
\subsection{Method \code{UpdateLeafTypeWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateLeafTypeWithHttpInfo(id, leaf.type.update, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateLocalization"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateLocalization}{}}}
\subsection{Method \code{UpdateLocalization()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateLocalization(id, localization.update, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateLocalizationWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateLocalizationWithHttpInfo}{}}}
\subsection{Method \code{UpdateLocalizationWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateLocalizationWithHttpInfo(id, localization.update, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateLocalizationList"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateLocalizationList}{}}}
\subsection{Method \code{UpdateLocalizationList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateLocalizationList(
  project,
  attribute.bulk.update,
  media.query = NULL,
  media.id = NULL,
  type = NULL,
  version = NULL,
  modified = 1,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  exclude.parents = 0,
  frame = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateLocalizationListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateLocalizationListWithHttpInfo}{}}}
\subsection{Method \code{UpdateLocalizationListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateLocalizationListWithHttpInfo(
  project,
  attribute.bulk.update,
  media.query = NULL,
  media.id = NULL,
  type = NULL,
  version = NULL,
  modified = 1,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  exclude.parents = 0,
  frame = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateLocalizationType"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateLocalizationType}{}}}
\subsection{Method \code{UpdateLocalizationType()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateLocalizationType(id, localization.type.update, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateLocalizationTypeWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateLocalizationTypeWithHttpInfo}{}}}
\subsection{Method \code{UpdateLocalizationTypeWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateLocalizationTypeWithHttpInfo(id, localization.type.update, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateMedia"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateMedia}{}}}
\subsection{Method \code{UpdateMedia()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateMedia(id, media.update, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateMediaWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateMediaWithHttpInfo}{}}}
\subsection{Method \code{UpdateMediaWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateMediaWithHttpInfo(id, media.update, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateMediaList"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateMediaList}{}}}
\subsection{Method \code{UpdateMediaList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateMediaList(
  project,
  attribute.bulk.update,
  media.id = NULL,
  type = NULL,
  name = NULL,
  md5 = NULL,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateMediaListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateMediaListWithHttpInfo}{}}}
\subsection{Method \code{UpdateMediaListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateMediaListWithHttpInfo(
  project,
  attribute.bulk.update,
  media.id = NULL,
  type = NULL,
  name = NULL,
  md5 = NULL,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateMediaType"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateMediaType}{}}}
\subsection{Method \code{UpdateMediaType()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateMediaType(id, media.type.update, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateMediaTypeWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateMediaTypeWithHttpInfo}{}}}
\subsection{Method \code{UpdateMediaTypeWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateMediaTypeWithHttpInfo(id, media.type.update, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateMembership"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateMembership}{}}}
\subsection{Method \code{UpdateMembership()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateMembership(id, membership.update, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateMembershipWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateMembershipWithHttpInfo}{}}}
\subsection{Method \code{UpdateMembershipWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateMembershipWithHttpInfo(id, membership.update, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateProject"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateProject}{}}}
\subsection{Method \code{UpdateProject()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateProject(id, project.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateProjectWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateProjectWithHttpInfo}{}}}
\subsection{Method \code{UpdateProjectWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateProjectWithHttpInfo(id, project.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateState"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateState}{}}}
\subsection{Method \code{UpdateState()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateState(id, state.update, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateStateWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateStateWithHttpInfo}{}}}
\subsection{Method \code{UpdateStateWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateStateWithHttpInfo(id, state.update, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateStateList"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateStateList}{}}}
\subsection{Method \code{UpdateStateList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateStateList(
  project,
  attribute.bulk.update,
  media.query = NULL,
  media.id = NULL,
  type = NULL,
  version = NULL,
  modified = 1,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateStateListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateStateListWithHttpInfo}{}}}
\subsection{Method \code{UpdateStateListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateStateListWithHttpInfo(
  project,
  attribute.bulk.update,
  media.query = NULL,
  media.id = NULL,
  type = NULL,
  version = NULL,
  modified = 1,
  after = NULL,
  search = NULL,
  attribute = NULL,
  attribute.lt = NULL,
  attribute.lte = NULL,
  attribute.gt = NULL,
  attribute.gte = NULL,
  attribute.contains = NULL,
  attribute.distance = NULL,
  attribute.null = NULL,
  operation = NULL,
  start = NULL,
  stop = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateStateType"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateStateType}{}}}
\subsection{Method \code{UpdateStateType()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateStateType(id, state.type.update, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateStateTypeWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateStateTypeWithHttpInfo}{}}}
\subsection{Method \code{UpdateStateTypeWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateStateTypeWithHttpInfo(id, state.type.update, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateVersion"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateVersion}{}}}
\subsection{Method \code{UpdateVersion()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateVersion(id, version.update, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateVersionWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateVersionWithHttpInfo}{}}}
\subsection{Method \code{UpdateVersionWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$UpdateVersionWithHttpInfo(id, version.update, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Whoami"></a>}}
\if{latex}{\out{\hypertarget{method-Whoami}{}}}
\subsection{Method \code{Whoami()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$Whoami(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WhoamiWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-WhoamiWithHttpInfo}{}}}
\subsection{Method \code{WhoamiWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$WhoamiWithHttpInfo(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TatorApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
