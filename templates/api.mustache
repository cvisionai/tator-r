{{>partial_header}}
{{#operations}}
#' @docType class
#' @title {{baseName}} operations
#' @description {{importPath}}
#' @format An \code{R6Class} generator object
#' @field api_client Handles the client-server communication.
#'
#' @importFrom R6 R6Class
{{#useRlangExceptionHandling}}
#' @importFrom rlang abort
{{/useRlangExceptionHandling}}
#' @export
{{classname}} <- R6::R6Class(
  '{{classname}}',
  public = list(
    api_client = NULL,
    #' @description initialization method
    #' @param api_client ApiClient class object
    initialize = function(api_client){
      httr::set_config(httr::config(http_version = 0))
      if (!missing(api_client)) {
        self$api_client <- api_client
      }
      else {
        self$api_client <- ApiClient$new()
      }
    },
    {{#operation}}
    #' @description {{{operationIdSnakeCase}}}
    {{#notes}}
    #' @details {{{unescapedNotes}}}
    {{/notes}}
    {{#requiredParams}} 
    #' @param {{paramName}} {{paramName}}
    {{/requiredParams}}
    {{#optionalParams}} 
    #' @param {{paramName}} {{paramName}}
    {{/optionalParams}}
    #' @param ... Optional params
    #' @examples
    #' \dontrun{
    #'     library({{{packageName}}})
    #'     api <- get_api(host = 'https://cloud.tator.io', token = 'MY_TOKEN')
    #'     result <- api${{{operationIdSnakeCase}}}(
    {{#requiredParams}}
    #'         {{{paramName}}}{{^-last}}, {{/-last}}
    {{/requiredParams}}
    #'     )
    #' }
    {{{operationIdSnakeCase}}} = function({{#requiredParams}}{{paramName}}, {{/requiredParams}}{{#optionalParams}}{{paramName}}={{^defaultValue}}NULL{{/defaultValue}}{{#defaultValue}}{{#isListContainer}}list(){{/isListContainer}}{{^isListContainer}}{{{.}}}{{/isListContainer}}{{/defaultValue}}, {{/optionalParams}}...){
      apiResponse <- private${{{operationIdSnakeCase}}}_with_http_info({{#allParams}}{{paramName}}, {{/allParams}}...)
      resp <- apiResponse$response
      if (httr::status_code(resp) >= 200 && httr::status_code(resp) <= 299) {
        apiResponse$content
      } else if (httr::status_code(resp) >= 300 && httr::status_code(resp) <= 399) {
        apiResponse
      } else if (httr::status_code(resp) >= 400 && httr::status_code(resp) <= 499) {
        apiResponse
      } else if (httr::status_code(resp) >= 500 && httr::status_code(resp) <= 599) {
        apiResponse
      }
    }{{#hasMore}},{{/hasMore}}
    {{/operation}}
  ),
  private = list(
    {{#operation}}
    {{{operationIdSnakeCase}}}_with_http_info = function({{#requiredParams}}{{paramName}}, {{/requiredParams}}{{#optionalParams}}{{paramName}}={{^defaultValue}}NULL{{/defaultValue}}{{#defaultValue}}{{#isListContainer}}list(){{/isListContainer}}{{^isListContainer}}{{{.}}}{{/isListContainer}}{{/defaultValue}}, {{/optionalParams}}...){
      args <- list(...)
      queryParams <- list()
      headerParams <- c()

      {{#requiredParams}}
      if (missing(`{{paramName}}`)) {
      {{#useDefaultExceptionHandling}}
        stop("Missing required parameter `{{{paramName}}}`.")
      {{/useDefaultExceptionHandling}}
      {{#useRlangExceptionHandling}}
        rlang::abort(message = "Missing required parameter `{{{paramName}}}`.", .subclass = "ApiException", ApiException = ApiException$new(status = 0, reason = "Missing required parameter `{{{paramName}}}`."))
      {{/useRlangExceptionHandling}}
      }

      {{/requiredParams}}
      {{#headerParams}}
      headerParams['{{baseName}}'] <- `{{paramName}}`

      {{/headerParams}}
      {{#queryParams}}
      queryParams['{{baseName}}'] <- {{paramName}}

      {{/queryParams}}
      {{#hasFormParams}}
      body <- list(
        {{#formParams}}
        {{^isFile}}
        "{{baseName}}" = {{paramName}}{{#hasMore}},{{/hasMore}}
        {{/isFile}}
        {{#isFile}}
        "{{baseName}}" = httr::upload_file({{paramName}}){{#hasMore}},{{/hasMore}}
        {{/isFile}}
        {{/formParams}}
      )

      {{/hasFormParams}}
      {{#hasBodyParam}}
      {{#bodyParams}}
      if (!missing(`{{paramName}}`)) {
        {{#isListContainer}}
        body.items = paste(unlist(lapply({{paramName}}, function(param){param$toJSONString()})), collapse = ",")
        body <- paste0('[', body.items, ']')
        {{/isListContainer}}
        {{^isListContainer}}
        body <- `{{paramName}}`$toJSONString()
        {{/isListContainer}}
      } else {
        body <- NULL
      }

      {{/bodyParams}}
      {{/hasBodyParam}}
      urlPath <- "{{path}}"
      {{#hasPathParams}}
      {{#pathParams}}
      if (!missing(`{{paramName}}`)) {
        urlPath <- gsub(paste0("\\{", "{{baseName}}", "\\}"), URLencode(as.character(`{{paramName}}`), reserved = TRUE), urlPath)
      }

      {{/pathParams}}
      {{/hasPathParams}}
      {{#authMethods}}
      {{#isBasic}}
      {{#isBasicBasic}}
      # HTTP basic auth
      headerParams['Authorization'] <- paste("Basic", base64enc::base64encode(charToRaw(paste(self$api_client$username, self$api_client$password, sep=":"))))
      {{/isBasicBasic}}
      {{/isBasic}}
      {{#isApiKey}}
      # API key authentication
      {{#isKeyInHeader}}
      if ("{{{keyParamName}}}" %in% names(self$api_client$apiKeys) && nchar(self$api_client$apiKeys["{{{keyParamName}}}"]) > 0) {
        headerParams['{{keyParamName}}'] <- paste(unlist(self$api_client$apiKeys["{{keyParamName}}"]), collapse='')
      }
      {{/isKeyInHeader}}
      {{#isKeyInQuery}}
      if ("{{{keyParamName}}}" %in% names(self$api_client$apiKeys) && nchar(self$api_client$apiKeys["{{{keyParamName}}}"]) > 0) {
        queryParams['{{keyParamName}}'] <- paste(unlist(self$api_client$apiKeys["{{keyParamName}}"]), collapse='')
      }
      {{/isKeyInQuery}}
      {{/isApiKey}}
      {{#isOAuth}}
      # OAuth token
      headerParams['Authorization'] <- paste("Bearer", self$api_client$accessToken, sep=" ")
      {{/isOAuth}}
      {{/authMethods}}

      resp <- self$api_client$CallApi(url = paste0(self$api_client$basePath, urlPath),
                                 method = "{{httpMethod}}",
                                 queryParams = queryParams,
                                 headerParams = headerParams,
                                 body = body,
                                 ...)

      if (httr::status_code(resp) >= 200 && httr::status_code(resp) <= 299) {
        {{#returnType}}
        {{#isPrimitiveType}}
        content <- httr::content(
            resp, "text", encoding = "UTF-8", simplifyVector = FALSE
        )
        ApiResponse$new(content,resp)
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
        deserializedRespObj <- tryCatch(
          self$api_client$deserialize(resp, "{{returnType}}", loadNamespace("{{packageName}}")),
          error = function(e){
           {{#useDefaultExceptionHandling}}
             stop("Failed to deserialize response")
           {{/useDefaultExceptionHandling}}
           {{#useRlangExceptionHandling}}
             rlang::abort(message = "Failed to deserialize response", .subclass = "ApiException", ApiException = ApiException$new(http_response = resp))
           {{/useRlangExceptionHandling}}
          }
        )
        ApiResponse$new(deserializedRespObj, resp)
        {{/isPrimitiveType}}
        {{/returnType}}
        {{^returnType}}
        {{! Returning the ApiResponse object with NULL object when the endpoint doesn't return anything}}
        ApiResponse$new(NULL, resp)
        {{/returnType}}
      } else if (httr::status_code(resp) >= 300 && httr::status_code(resp) <= 399) {
      {{#returnExceptionOnFailure}}
        errorMsg <- toString(content(resp))
        if(errorMsg == ""){
          errorMsg <- paste("Server returned " , httr::status_code(resp) , " response status code.")
        }
        {{#useDefaultExceptionHandling}}
        stop(errorMsg)
        {{/useDefaultExceptionHandling}}
        {{#useRlangExceptionHandling}}
        rlang::abort(message = errorMsg, .subclass = "ApiException", ApiException = ApiException$new(http_response = resp))
        {{/useRlangExceptionHandling}}
      {{/returnExceptionOnFailure}}
      {{^returnExceptionOnFailure}}
        ApiResponse$new(paste("Server returned " , httr::status_code(resp) , " response status code."), resp)
      {{/returnExceptionOnFailure}}
      } else if (httr::status_code(resp) >= 400 && httr::status_code(resp) <= 499) {
        if (httr::status_code(resp) == 400) {
          deserializedRespObj <- tryCatch(
            self$api_client$deserialize(resp, "BadRequestResponse", loadNamespace("{{packageName}}")),
            error = function(e){
            {{#useDefaultExceptionHandling}}
              stop("Failed to deserialize response")
            {{/useDefaultExceptionHandling}}
            {{#useRlangExceptionHandling}}
              rlang::abort(message = "Failed to deserialize response", .subclass = "ApiException", ApiException = ApiException$new(http_response = resp))
            {{/useRlangExceptionHandling}}
            }
          )
          ApiResponse$new(deserializedRespObj, resp) 
        } else if (httr::status_code(resp) == 404) {
          deserializedRespObj <- tryCatch(
            self$api_client$deserialize(resp, "NotFoundResponse", loadNamespace("{{packageName}}")),
            error = function(e){
            {{#useDefaultExceptionHandling}}
              stop("Failed to deserialize response")
            {{/useDefaultExceptionHandling}}
            {{#useRlangExceptionHandling}}
              rlang::abort(message = "Failed to deserialize response", .subclass = "ApiException", ApiException = ApiException$new(http_response = resp))
            {{/useRlangExceptionHandling}}
            }
          )
          ApiResponse$new(deserializedRespObj, resp) 
        } else {
        {{#returnExceptionOnFailure}}
          errorMsg <- toString(content(resp))
          if(errorMsg == ""){
            errorMsg <- "Api client exception encountered."
          }
          {{#useDefaultExceptionHandling}}
          stop(errorMsg)
          {{/useDefaultExceptionHandling}}
          {{#useRlangExceptionHandling}}
          rlang::abort(message = errorMsg, .subclass = "ApiException", ApiException = ApiException$new(http_response = resp))
          {{/useRlangExceptionHandling}}
        {{/returnExceptionOnFailure}}
        {{^returnExceptionOnFailure}}
          ApiResponse$new("API client error", resp)
        {{/returnExceptionOnFailure}}
        }
      } else if (httr::status_code(resp) >= 500 && httr::status_code(resp) <= 599) {
      {{#returnExceptionOnFailure}}
        errorMsg <- toString(content(resp))
        if(errorMsg == ""){
          errorMsg <- "Api server exception encountered."
        }
        {{#useDefaultExceptionHandling}}
        stop(errorMsg)
        {{/useDefaultExceptionHandling}}
        {{#useRlangExceptionHandling}}
        rlang::abort(message = errorMsg, .subclass = "ApiException", ApiException = ApiException$new(http_response = resp))
        {{/useRlangExceptionHandling}}
      {{/returnExceptionOnFailure}}
      {{^returnExceptionOnFailure}}
        ApiResponse$new("API server error", resp)
      {{/returnExceptionOnFailure}}
      }
    }{{#hasMore}},{{/hasMore}}
    {{/operation}}
  )
)
{{/operations}}
